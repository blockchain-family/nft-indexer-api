{
  "db_name": "PostgreSQL",
  "query": "\n            with actual_direct_buy as (select s.address             as address,\n                                              s.created             as created,\n                                              s.updated             as updated,\n                                              s.tx_lt               as tx_lt,\n                                              s.nft                 as nft,\n                                              s.collection          as collection,\n                                              s.buyer               as buyer,\n                                              s.price_token         as price_token,\n                                              s.price               as price,\n                                              s.price * p.usd_price as usd_price,\n                                              s.finished_at         as finished_at,\n                                              s.expired_at          as expired_at,\n                                              case\n                                                  when s.state = 'active'::direct_buy_state and\n                                                       to_timestamp(0::double precision) < s.expired_at and\n                                                       s.expired_at < now()::timestamp then 'expired'::direct_buy_state\n                                                  else s.state end  as state,\n                                              fee_numerator,\n                                              fee_denominator\n                                       from nft_direct_buy s\n                                                join offers_whitelist ow on ow.address = s.address\n                                                left join token_usd_prices p on s.price_token = p.token\n                                                left join lateral ( select ((ne.args -> 'fee') -> 'numerator')::integer   as fee_numerator,\n                                                                           ((ne.args -> 'fee') -> 'denominator')::integer as fee_denominator\n                                                                    from nft_events ne\n                                                                    where ne.event_type = 'market_fee_changed'::event_type\n                                                                      and (ne.args ->> 'auction') = s.address) ev on true\n                                                join nft n on n.address = s.nft\n                                       where n.owner = $1\n                                         and (n.collection = any ($2) or array_length($2::varchar[], 1) is null)\n                                       order by s.updated desc)\n            select address          as \"address!\",\n                   created          as \"created!\",\n                   updated          as \"updated!\",\n                   tx_lt            as \"tx_lt!\",\n                   nft              as \"nft!\",\n                   collection       as \"collection?\",\n                   buyer            as \"buyer?\",\n                   price_token      as \"price_token!\",\n                   price            as \"price!\",\n                   usd_price        as \"usd_price?\",\n                   finished_at      as \"finished_at?\",\n                   expired_at       as \"expired_at?\",\n                   state            as \"state!: _\",\n                   count(1) over () as  \"cnt!\",\n                   fee_numerator,\n                   fee_denominator\n            from actual_direct_buy\n            where array_length($3::direct_buy_state[], 1) is null\n               or state = any ($3)\n            limit $4 offset $5\n            ",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "address!",
        "type_info": "Varchar"
      },
      {
        "ordinal": 1,
        "name": "created!",
        "type_info": "Timestamp"
      },
      {
        "ordinal": 2,
        "name": "updated!",
        "type_info": "Timestamp"
      },
      {
        "ordinal": 3,
        "name": "tx_lt!",
        "type_info": "Int8"
      },
      {
        "ordinal": 4,
        "name": "nft!",
        "type_info": "Varchar"
      },
      {
        "ordinal": 5,
        "name": "collection?",
        "type_info": "Varchar"
      },
      {
        "ordinal": 6,
        "name": "buyer?",
        "type_info": "Varchar"
      },
      {
        "ordinal": 7,
        "name": "price_token!",
        "type_info": "Varchar"
      },
      {
        "ordinal": 8,
        "name": "price!",
        "type_info": "Numeric"
      },
      {
        "ordinal": 9,
        "name": "usd_price?",
        "type_info": "Numeric"
      },
      {
        "ordinal": 10,
        "name": "finished_at?",
        "type_info": "Timestamp"
      },
      {
        "ordinal": 11,
        "name": "expired_at?",
        "type_info": "Timestamp"
      },
      {
        "ordinal": 12,
        "name": "state!: _",
        "type_info": {
          "Custom": {
            "name": "direct_buy_state",
            "kind": {
              "Enum": [
                "create",
                "await_tokens",
                "active",
                "filled",
                "cancelled",
                "expired"
              ]
            }
          }
        }
      },
      {
        "ordinal": 13,
        "name": "cnt!",
        "type_info": "Int8"
      },
      {
        "ordinal": 14,
        "name": "fee_numerator",
        "type_info": "Int4"
      },
      {
        "ordinal": 15,
        "name": "fee_denominator",
        "type_info": "Int4"
      }
    ],
    "parameters": {
      "Left": [
        "Text",
        "TextArray",
        {
          "Custom": {
            "name": "direct_buy_state[]",
            "kind": {
              "Array": {
                "Custom": {
                  "name": "direct_buy_state",
                  "kind": {
                    "Enum": [
                      "create",
                      "await_tokens",
                      "active",
                      "filled",
                      "cancelled",
                      "expired"
                    ]
                  }
                }
              }
            }
          }
        },
        "Int8",
        "Int8"
      ]
    },
    "nullable": [
      false,
      false,
      false,
      false,
      false,
      true,
      false,
      false,
      false,
      null,
      true,
      false,
      null,
      null,
      null,
      null
    ]
  },
  "hash": "85f4a3f90413af8f541b091dc95c133df286752031da277c19803d375d1237ba"
}
