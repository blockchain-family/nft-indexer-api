use crate::db::{
    AuctionStatus, DirectBuyState, DirectSellState, MetaRoyalty, NftEventType, NftForBanner,
    RootType, Social,
};
use crate::handlers::requests::*;
use crate::handlers::requests::{collections::*, metadata::*};
use crate::handlers::{
    auction::*, auth::*, collection::*, collection_custom::*, events::*, metadata::*, metrics::*,
    nft::*, owner::*, service::*, user::*,
};
use crate::model::*;
use crate::schema::*;
use utoipa::OpenApi;

#[derive(OpenApi)]
#[openapi(
    paths(
        list_roots,
        get_auctions,
        get_auction,
        get_auction_bids,
        sign_in,
        upsert_collection_custom,
        list_collections,
        list_collections_simple,
        list_collections_evaluation,
        get_collection,
        get_collections_by_owner,
        search_all,
        get_events,
        update_metadata,
        get_metrics_summary,
        get_nft,
        get_nft_direct_buy,
        get_nft_price_history,
        get_nft_list,
        get_nft_top_list,
        get_nft_random_list,
        get_nft_types,
        get_nft_for_banner,
        get_nfts_price_range,
        get_my_best_offer,
        get_owner_bids_out,
        get_owner_bids_in,
        get_owner_direct_buy,
        get_owner_direct_buy_in,
        get_owner_direct_sell,
        get_fee,
        get_user_by_address,
        upsert_user,
    ),
    components(schemas(
        Roots,
        Root,
        Address,
        Auction,
        Collection,
        DirectBuy,
        DirectSell,
        Fee,
        DirectBuyState,
        NFT,
        Contract,
        Price,
        AuctionBid,
        DirectSellState,
        AuctionStatus,
        OrderDirection,
        CollectionDetails,
        CollectionDetailsPreviewMeta,
        NftEventType,
        Attribute,
        CollectionEvaluationList,
        CollectionEvaluation,
        Period,
        AuctionsQuery,
        AuctionsSortOrder,
        VecWithAuction,
        AuctionBidsQuery,
        GetAuctionResult,
        VecWithAuctionBids,
        SignInPayload,
        UpsertCollectionCustomPayload,
        Social,
        VecCollectionsWithTotal,
        ListCollectionsParams,
        CollectionListOrder,
        CollectionOrderingFields,
        ListCollectionsSimpleParams,
        ListCollectionsEvaluationParams,
        VecCollectionSimpleWithTotal,
        CollectionParam,
        CollectionSimple,
        OwnerParam,
        CollectionParam,
        SearchResult,
        SearchRes,
        EventsQuery,
        NftEvents,
        NftEvent,
        NftEventDirectSell,
        NftEventDirectBuy,
        NftEventAuction,
        NftEventMint,
        NftEventTransfer,
        AuctionActive,
        AuctionComplete,
        AuctionCanceled,
        AuctionBidPlaced,
        UpdateMetadataParams,
        MetricsSummaryBase,
        MetricsSummary,
        NFTParam,
        GetNFTResult,
        NftTrait,
        NftPriceHistoryQuery,
        NFTPrice,
        VecWithNFT,
        NFTListOrder,
        AttributeFilter,
        NFTListQuery,
        PriceHistoryScale,
        VecWithDirectBuy,
        NFTListOrderField,
        NFTTopListQuery,
        MetaRoyalty,
        NFTListRandomBuyQuery,
        NftForBanner,
        NftPriceRangeParams,
        NftsPriceRange,
        MyBestOfferForNftQuery,
        OwnerBidsOutQuery,
        VecWithAuctionBids,
        OwnerDirectBuyQuery,
        OwnerDirectSellQuery,
        VecWithDirectSell,
        VecWithDirectBuy,
        OwnerBidsInQuery,
        RootType,
        OwnerFee,
        UserDto,
        UpsertUserPayload,
    )),
    tags(
        (name = "auction", description = "Auction handlers"),
        (name = "service", description = "Service handlers"),
        (name = "auth", description = "Authorization handlers"),
        (name = "collection-custom", description = "Collection-custom handlers"),
        (name = "collection", description = "Collection handlers"),
        (name = "event", description = "Event handlers"),
        (name = "metadata", description = "Refresh metadata"),
        (name = "metrics", description = "Metrics handlers"),
        (name = "nft", description = "NFT handlers"),
        (name = "owner", description = "Owner handlers"),
        (name = "user", description = "User handlers")
    ),
    info(title = "Marketplace API")
)]
pub struct ApiDoc;
