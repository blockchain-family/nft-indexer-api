{
  "db": "PostgreSQL",
  "02d0c96c53a1625f778453f0a737706554dfeb6102a161af7f0b5dce3319639b": {
    "describe": {
      "columns": [
        {
          "name": "address!",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "created!",
          "ordinal": 1,
          "type_info": "Timestamp"
        },
        {
          "name": "updated!",
          "ordinal": 2,
          "type_info": "Timestamp"
        },
        {
          "name": "tx_lt!",
          "ordinal": 3,
          "type_info": "Int8"
        },
        {
          "name": "nft!",
          "ordinal": 4,
          "type_info": "Varchar"
        },
        {
          "name": "collection?",
          "ordinal": 5,
          "type_info": "Varchar"
        },
        {
          "name": "seller?",
          "ordinal": 6,
          "type_info": "Varchar"
        },
        {
          "name": "price_token!",
          "ordinal": 7,
          "type_info": "Varchar"
        },
        {
          "name": "price!",
          "ordinal": 8,
          "type_info": "Numeric"
        },
        {
          "name": "usd_price?",
          "ordinal": 9,
          "type_info": "Numeric"
        },
        {
          "name": "finished_at?",
          "ordinal": 10,
          "type_info": "Timestamp"
        },
        {
          "name": "expired_at?",
          "ordinal": 11,
          "type_info": "Timestamp"
        },
        {
          "name": "state!: _",
          "ordinal": 12,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "create",
                  "await_nft",
                  "active",
                  "filled",
                  "cancelled",
                  "expired"
                ]
              },
              "name": "direct_sell_state"
            }
          }
        },
        {
          "name": "cnt!",
          "ordinal": 13,
          "type_info": "Int8"
        },
        {
          "name": "fee_numerator",
          "ordinal": 14,
          "type_info": "Int4"
        },
        {
          "name": "fee_denominator",
          "ordinal": 15,
          "type_info": "Int4"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false,
        false,
        true,
        false,
        false,
        false,
        null,
        true,
        false,
        false,
        null,
        null,
        null
      ],
      "parameters": {
        "Left": [
          "Text",
          "TextArray",
          "VarcharArray",
          "Int8",
          "Int8"
        ]
      }
    },
    "query": "\n            select s.address             as \"address!\",\n                   s.created             as \"created!\",\n                   s.updated             as \"updated!\",\n                   s.tx_lt               as \"tx_lt!\",\n                   s.nft                 as \"nft!\",\n                   s.collection          as \"collection?\",\n                   s.seller              as \"seller?\",\n                   s.price_token         as \"price_token!\",\n                   s.price               as \"price!\",\n                   s.price * p.usd_price as \"usd_price?\",\n                   s.finished_at         as \"finished_at?\",\n                   s.expired_at          as \"expired_at?\",\n                   s.state               as \"state!: _\",\n                   count(1) over ()      as \"cnt!\",\n                   fee_numerator,\n                   fee_denominator\n            from nft_direct_sell s\n                     join offers_whitelist ow on ow.address = s.address\n                     left join token_usd_prices p on s.price_token = p.token\n                     left join lateral ( select (ne.args -> 'fee' -> 'numerator')::int   as fee_numerator,\n                                                (ne.args -> 'fee' -> 'denominator')::int as fee_denominator\n                                         from nft_events ne\n                                         where ne.event_type = 'market_fee_changed'\n                                           and ne.args ->> 'auction' = s.address ) as ev on true\n            where s.seller = $1\n              and (s.collection = any ($2) or array_length($2::varchar[], 1) is null)\n              and (array_length($3::varchar[], 1) is null or s.state::varchar = any ($3))\n            order by s.updated desc\n            limit $4 offset $5\n            "
  },
  "0798e75de3aa345f5297c76a004a34342cbe60485127493557970d892f3e75e9": {
    "describe": {
      "columns": [
        {
          "name": "content",
          "ordinal": 0,
          "type_info": "Json"
        }
      ],
      "nullable": [
        null
      ],
      "parameters": {
        "Left": [
          {
            "Custom": {
              "kind": {
                "Array": {
                  "Custom": {
                    "kind": {
                      "Enum": [
                        "mint",
                        "transfer",
                        "auction_active",
                        "auction_bid_placed",
                        "auction_canceled",
                        "auction_complete",
                        "offer_active",
                        "sell_active",
                        "offer_filled",
                        "sell_purchased",
                        "sell_canceled",
                        "offer_canceled"
                      ]
                    },
                    "name": "event_kind"
                  }
                }
              },
              "name": "_event_kind"
            }
          },
          {
            "Custom": {
              "kind": {
                "Domain": "Varchar"
              },
              "name": "t_address"
            }
          },
          {
            "Custom": {
              "kind": {
                "Domain": "Varchar"
              },
              "name": "t_address"
            }
          },
          {
            "Custom": {
              "kind": {
                "Array": {
                  "Custom": {
                    "kind": {
                      "Domain": "Varchar"
                    },
                    "name": "t_address"
                  }
                }
              },
              "name": "_t_address"
            }
          },
          "Int4",
          "Int4",
          "Bool",
          "Bool"
        ]
      }
    },
    "query": "with events_whitelist as (\n    select of.address\n    from deployed_offers of\n     inner join roots r\n         on r.address = of.root\n    union\n    select address\n    from roots\n)\nselect json_build_object(\n               'totalRows',\n               coalesce(max(r.total_rows), 0),\n               'data',\n               coalesce(json_agg(json_build_object(\n                       'eventType', r.computed_event_kind,\n                       'id', r.id,\n                       'name', nft.name,\n                       'description', nft.description,\n                       'datetime', r.created_at,\n                       'address', r.nft,\n                       'previewUrl', nm.meta -> 'preview' ->> 'source',\n                       'mint', case\n                                   when r.computed_event_kind = 'mint' then\n                                       json_build_object(\n                                               'owner',\n                                               r.args -> 'owner',\n                                               'creator',\n                                               r.args -> 'creator'\n                                           )\n                           end,\n                       'transfer',\n                       case\n                           when r.computed_event_kind = 'transfer'\n                               then json_build_object(\n                                   'from', r.args -> 'old_owner',\n                                   'to', r.args -> 'new_owner')\n                           end,\n                       'directSell',\n                       case\n                           when\n                               r.event_type = 'direct_sell_state_changed'\n                               then\n                               json_build_object(\n                                       'creator', r.args -> 'value2' -> 'creator',\n                                       'startTime', r.args -> 'value2' -> 'start',\n                                       'endTime', r.args -> 'value2' -> 'end',\n                                       'status', r.args -> 'value2' -> 'status',\n                                       'price', r.args -> 'value2' ->> '_price',\n                                       'usdPrice', ((r.args -> 'value2' ->> '_price')::numeric * curr.usd_price)::text,\n                                       'paymentToken', r.args -> 'value2' -> 'token',\n                                       'newOwner', r.new_owner\n                                   )\n                           end,\n                       'directBuy',\n                       case\n                           when\n                               r.event_type = 'direct_buy_state_changed'\n                               then\n                               json_build_object(\n                                       'creator', r.args -> 'value2' -> 'creator',\n                                       'startTime', r.args -> 'value2' -> 'start_time_buy',\n                                       'endTime', r.args -> 'value2' -> 'end_time_buy',\n                                       'durationTime', r.args -> 'value2' -> 'duration_time',\n                                       'price', r.args -> 'value2' ->> '_price',\n                                       'usdPrice', ((r.args -> 'value2' ->> '_price')::numeric * curr.usd_price)::text,\n                                       'status', r.args -> 'value2' -> 'status',\n                                       'spentToken', r.args -> 'value2' -> 'spent_token',\n                                       'oldOwner', r.old_owner\n                                   )\n                           end,\n                       'auction',\n                       case\n                           when\n                               computed_event_kind in ('auction_active', 'auction_complete', 'auction_canceled', 'auction_bid_placed')\n                               then\n                               json_build_object(\n                                       'auctionActive',\n                                       case\n                                           when\n                                               r.computed_event_kind = 'auction_active'\n                                               then\n                                               json_build_object(\n                                                       'nftOwner', r.args -> 'value0' -> 'subject_owner',\n                                                       'auctionStartTime', r.args -> 'value0' -> 'start_time',\n                                                       'auctionEndTime', r.args -> 'value0' -> 'end_time',\n                                                       'auctionDuration', r.args -> 'value0' -> 'duration',\n                                                       'state', 1,\n                                                       'paymentToken', r.args -> 'value0' -> 'payment_token',\n                                                       'price', r.args -> 'value0' ->> 'price',\n                                                       'usdPrice',\n                                                       ((r.args -> 'value0' ->> 'price')::numeric * curr.usd_price)::text\n                                                   )\n                                           end,\n                                       'auctionComplete',\n                                       case\n                                           when\n                                               r.computed_event_kind = 'auction_complete'\n                                               then\n                                               json_build_object(\n                                                       'nftOwner', r.args -> 'value2' -> 'subject_owner',\n                                                       'auctionStartTime', r.args -> 'value2' -> 'start_time',\n                                                       'auctionEndTime', r.args -> 'value2' -> 'end_time',\n                                                       'auctionDuration', r.args -> 'value2' -> 'duration',\n                                                       'state', 3,\n                                                       'paymentToken', r.args -> 'value2' -> 'payment_token',\n                                                       'maxBidValue', r.args ->> 'value',\n                                                       'maxBidAddress', r.args -> 'buyer',\n                                                       'price', (r.args ->> 'value'),\n                                                       'usdPrice', ((r.args ->> 'value')::numeric * curr.usd_price)::text\n                                                   )\n                                           end,\n                                                                'auctionCanceled',\n                             case\n                                 when\n                                     r.computed_event_kind = 'auction_canceled'\n                                 then\n                                     json_build_object(\n                                         'nftOwner', r.args-> 'value0' -> 'subject_owner',\n                                         'auctionStartTime', r.args -> 'value0' -> 'start_time',\n                                         'auctionEndTime', r.args -> 'value0' -> 'end_time',\n                                         'auctionDuration', r.args -> 'value0' -> 'duration',\n                                         'state', 0,\n                                         'paymentToken', r.args -> 'value0' -> 'payment_token',\n                                         'price', r.args -> 'value0' ->> 'price',\n                                         'usdPrice', ((r.args -> 'value0' ->> 'price')::numeric * curr.usd_price)::text\n                                     )\n                             end,\n\n                                       'auctionBidPlaced',\n                                       case\n                                           when\n                                               r.computed_event_kind = 'auction_bid_placed'\n                                               then\n                                               json_build_object(\n                                                       'bidSender', r.args -> 'buyer',\n                                                       'paymentToken', r.args -> 'value3' -> 'payment_token',\n                                                       'bidValue', r.args ->> 'value',\n                                                       'usdPrice', ((r.args ->> 'value')::numeric * curr.usd_price)::text\n                                                   )\n                                           end\n                                   )\n                           end\n                   )), '[]'::json)\n           ) content\nfrom  get_events(\n            p_owner => $2::t_address,\n            p_event_kind => $1::event_kind[],\n            p_nft => $3::t_address,\n            p_collections => $4::t_address[],\n            p_limit=> $5::integer,\n            p_offset => $6::integer,\n            p_with_count => $7::boolean,\n            p_verified => $8::boolean) as r\n         join nft on nft.address = r.nft\n         left join nft_metadata nm on nm.nft = r.nft\n         left join lateral (\n    select p.usd_price\n    from token_usd_prices p\n    where r.args -> 'value2' ->> 'token' = p.token::text\n       or r.args -> 'value2' ->> 'spent_token' = p.token::text\n       or r.args -> 'value0' ->> '_payment_token' = p.token::text\n       or r.args -> 'value2' ->> 'payment_token' = p.token::text\n       or r.args -> 'value0' ->> 'payment_token' = p.token::text\n       or r.args -> 'value3' ->> 'payment_token' = p.token::text\n       or r.args -> 'value1' ->> 'payment_token' = p.token::text\n    ) curr on true"
  },
  "085a86bb45991f5acf0258c90b2ad0aedf8de8dcd0d8988f94e4de9082f0431f": {
    "describe": {
      "columns": [
        {
          "name": "address",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "collection",
          "ordinal": 1,
          "type_info": "Varchar"
        },
        {
          "name": "owner",
          "ordinal": 2,
          "type_info": "Varchar"
        },
        {
          "name": "manager",
          "ordinal": 3,
          "type_info": "Varchar"
        },
        {
          "name": "name",
          "ordinal": 4,
          "type_info": "Text"
        },
        {
          "name": "description",
          "ordinal": 5,
          "type_info": "Text"
        },
        {
          "name": "burned",
          "ordinal": 6,
          "type_info": "Bool"
        },
        {
          "name": "updated",
          "ordinal": 7,
          "type_info": "Timestamp"
        },
        {
          "name": "tx_lt",
          "ordinal": 8,
          "type_info": "Int8"
        },
        {
          "name": "meta",
          "ordinal": 9,
          "type_info": "Jsonb"
        },
        {
          "name": "auction",
          "ordinal": 10,
          "type_info": "Varchar"
        },
        {
          "name": "auction_status: _",
          "ordinal": 11,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "created",
                  "active",
                  "cancelled",
                  "completed",
                  "expired"
                ]
              },
              "name": "auction_status"
            }
          }
        },
        {
          "name": "forsale",
          "ordinal": 12,
          "type_info": "Varchar"
        },
        {
          "name": "forsale_status: _",
          "ordinal": 13,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "create",
                  "await_nft",
                  "active",
                  "filled",
                  "cancelled",
                  "expired"
                ]
              },
              "name": "direct_sell_state"
            }
          }
        },
        {
          "name": "best_offer",
          "ordinal": 14,
          "type_info": "Varchar"
        },
        {
          "name": "floor_price_usd",
          "ordinal": 15,
          "type_info": "Numeric"
        },
        {
          "name": "deal_price_usd",
          "ordinal": 16,
          "type_info": "Numeric"
        },
        {
          "name": "floor_price",
          "ordinal": 17,
          "type_info": "Numeric"
        },
        {
          "name": "floor_price_token",
          "ordinal": 18,
          "type_info": "Varchar"
        },
        {
          "name": "nft_id",
          "ordinal": 19,
          "type_info": "Text"
        },
        {
          "name": "total_count!",
          "ordinal": 20,
          "type_info": "Int8"
        }
      ],
      "nullable": [
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        null
      ],
      "parameters": {
        "Left": [
          "Timestamp",
          "Int8",
          "Int8"
        ]
      }
    },
    "query": "\n                select n.*, count(1) over () as \"total_count!\"\n                from (\n                         select *\n                         from nft_verified_mv nvm\n                                  left join lateral (\n                             select count(1) as cnt\n                             from nft_price_history nph\n                                      join offers_whitelist ow on ow.address = nph.source\n                             where nvm.address = nph.nft\n                               and nph.ts >= $1\n                             ) offers on true\n                         where nvm.updated > $1\n                           and offers.cnt > 0\n                         order by offers.cnt desc, nvm.updated desc, nvm.address desc\n                         limit $2 offset $3) ag\n                         join nft_details n\n                              on ag.address = n.address\n            "
  },
  "0b2c4810c1ccc4e8142d0c7743e3bc485c2f563f265b8b3459bacf9a720ffa65": {
    "describe": {
      "columns": [
        {
          "name": "address!",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "created!",
          "ordinal": 1,
          "type_info": "Timestamp"
        },
        {
          "name": "updated!",
          "ordinal": 2,
          "type_info": "Timestamp"
        },
        {
          "name": "tx_lt!",
          "ordinal": 3,
          "type_info": "Int8"
        },
        {
          "name": "nft!",
          "ordinal": 4,
          "type_info": "Varchar"
        },
        {
          "name": "collection?",
          "ordinal": 5,
          "type_info": "Varchar"
        },
        {
          "name": "seller?",
          "ordinal": 6,
          "type_info": "Varchar"
        },
        {
          "name": "price_token!",
          "ordinal": 7,
          "type_info": "Varchar"
        },
        {
          "name": "price!",
          "ordinal": 8,
          "type_info": "Numeric"
        },
        {
          "name": "usd_price?",
          "ordinal": 9,
          "type_info": "Numeric"
        },
        {
          "name": "finished_at?",
          "ordinal": 10,
          "type_info": "Timestamp"
        },
        {
          "name": "expired_at?",
          "ordinal": 11,
          "type_info": "Timestamp"
        },
        {
          "name": "state!: _",
          "ordinal": 12,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "create",
                  "await_nft",
                  "active",
                  "filled",
                  "cancelled",
                  "expired"
                ]
              },
              "name": "direct_sell_state"
            }
          }
        },
        {
          "name": "cnt!",
          "ordinal": 13,
          "type_info": "Int8"
        },
        {
          "name": "fee_numerator",
          "ordinal": 14,
          "type_info": "Int4"
        },
        {
          "name": "fee_denominator",
          "ordinal": 15,
          "type_info": "Int4"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false,
        false,
        true,
        false,
        false,
        false,
        null,
        true,
        false,
        null,
        null,
        null,
        null
      ],
      "parameters": {
        "Left": [
          "Text"
        ]
      }
    },
    "query": "\n            select s.address             as \"address!\",\n                   s.created             as \"created!\",\n                   s.updated             as \"updated!\",\n                   s.tx_lt               as \"tx_lt!\",\n                   s.nft                 as \"nft!\",\n                   s.collection          as \"collection?\",\n                   s.seller              as \"seller?\",\n                   s.price_token         as \"price_token!\",\n                   s.price               as \"price!\",\n                   s.price * p.usd_price as \"usd_price?\",\n                   s.finished_at         as \"finished_at?\",\n                   s.expired_at          as \"expired_at?\",\n                   case when s.state = 'active'::direct_sell_state and to_timestamp(0) < s.expired_at and s.expired_at < now()::timestamp\n                            then 'expired'::direct_sell_state\n                        else s.state end as \"state!: _\",\n                   count(1) over ()      as \"cnt!\",\n                   fee_numerator,\n                   fee_denominator\n            from nft_direct_sell s\n                     join offers_whitelist ow on ow.address = s.address\n                     left join token_usd_prices p on s.price_token = p.token\n                     left join lateral ( select (ne.args -> 'fee' -> 'numerator')::int   as fee_numerator,\n                                                (ne.args -> 'fee' -> 'denominator')::int as fee_denominator\n                                         from nft_events ne\n                                         where ne.event_type = 'market_fee_changed'\n                                           and ne.args ->> 'auction' = s.address ) as ev on true\n            where s.address = $1\n            "
  },
  "10795a2a56c6c6162cebd8fafec514191977a108ab85f799eaccff3f4f52e7af": {
    "describe": {
      "columns": [
        {
          "name": "address!",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "name",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "description",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "logo",
          "ordinal": 3,
          "type_info": "Varchar"
        },
        {
          "name": "verified!",
          "ordinal": 4,
          "type_info": "Bool"
        },
        {
          "name": "cnt!",
          "ordinal": 5,
          "type_info": "Int8"
        },
        {
          "name": "nft_count!",
          "ordinal": 6,
          "type_info": "Int8"
        }
      ],
      "nullable": [
        true,
        true,
        true,
        true,
        true,
        null,
        true
      ],
      "parameters": {
        "Left": [
          "Int8",
          "Int8",
          "Bool",
          "Varchar"
        ]
      }
    },
    "query": "\n            select c.address                                                                   as \"address!\",\n                   c.name,\n                   c.description,\n                   c.logo,\n                   c.verified                                                                  as \"verified!\",\n                   case when $3::boolean is false then c.total_count else c.verified_count end as \"cnt!\",\n                   c.nft_count                                                                 as \"nft_count!\"\n            from nft_collection_details c\n            where ($3::boolean is false or c.verified is true)\n              and ($4::varchar is null or c.name ilike $4)\n            order by c.owners_count desc\n            limit $1 offset $2\n            "
  },
  "14217782d384f339d7155c8e4157d1267372f2da5a01d8de6689149352a07d2c": {
    "describe": {
      "columns": [
        {
          "name": "count",
          "ordinal": 0,
          "type_info": "Int8"
        }
      ],
      "nullable": [
        null
      ],
      "parameters": {
        "Left": [
          "Int8"
        ]
      }
    },
    "query": "\n            select count(1)\n            from nft n\n                     join nft_collection c on n.collection = c.address\n                     join nft_direct_sell nds on nds.nft = n.address and nds.created <= now() and\n                                                 (now() <= nds.expired_at or nds.expired_at = to_timestamp(0)) and\n                                                 nds.state = 'active' and nds.price <= $1::int8\n                     join offers_whitelist ow on ow.address = nds.address\n            where n.burned is false\n              and c.verified is true\n           "
  },
  "1b451fcbad66d11d33719334ff9b9cdd2f7863b26d6f2dcd52bbf4b005b14573": {
    "describe": {
      "columns": [
        {
          "name": "address!",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "owner!",
          "ordinal": 1,
          "type_info": "Varchar"
        },
        {
          "name": "name",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "description",
          "ordinal": 3,
          "type_info": "Text"
        },
        {
          "name": "updated!",
          "ordinal": 4,
          "type_info": "Timestamp"
        },
        {
          "name": "wallpaper",
          "ordinal": 5,
          "type_info": "Varchar"
        },
        {
          "name": "logo",
          "ordinal": 6,
          "type_info": "Varchar"
        },
        {
          "name": "total_price",
          "ordinal": 7,
          "type_info": "Numeric"
        },
        {
          "name": "max_price",
          "ordinal": 8,
          "type_info": "Numeric"
        },
        {
          "name": "owners_count",
          "ordinal": 9,
          "type_info": "Int4"
        },
        {
          "name": "verified!",
          "ordinal": 10,
          "type_info": "Bool"
        },
        {
          "name": "created!",
          "ordinal": 11,
          "type_info": "Timestamp"
        },
        {
          "name": "first_mint!",
          "ordinal": 12,
          "type_info": "Timestamp"
        },
        {
          "name": "nft_count!",
          "ordinal": 13,
          "type_info": "Int8"
        },
        {
          "name": "cnt!",
          "ordinal": 14,
          "type_info": "Int8"
        },
        {
          "name": "social",
          "ordinal": 15,
          "type_info": "Jsonb"
        }
      ],
      "nullable": [
        true,
        null,
        true,
        true,
        true,
        true,
        true,
        null,
        null,
        null,
        true,
        true,
        true,
        true,
        true,
        true
      ],
      "parameters": {
        "Left": [
          "TextArray"
        ]
      }
    },
    "query": "\n            select c.address     as \"address!\",\n                   coalesce(c.owner, '0:0000000000000000000000000000000000000000000000000000000000000000')       as \"owner!\",\n                   c.name        as \"name\",\n                   c.description as \"description\",\n                   c.updated     as \"updated!\",\n                   c.wallpaper   as \"wallpaper\",\n                   c.logo        as \"logo\",\n                   null::numeric as total_price,\n                   null::numeric as max_price,\n                   c.owners_count::int,\n                   c.verified    as \"verified!\",\n                   c.created     as \"created!\",\n                   c.first_mint  as \"first_mint!\",\n                   c.nft_count   as \"nft_count!\",\n                   c.total_count as \"cnt!\",\n                   c.social      as \"social\"\n            from nft_collection_details c\n            where c.address = any ($1)\n              --and owner is not null\n            "
  },
  "1f1f8196528dc4157c746098f130fd5fa2c950e2b89d02dd2eae4e539c90d889": {
    "describe": {
      "columns": [
        {
          "name": "address!",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "created!",
          "ordinal": 1,
          "type_info": "Timestamp"
        },
        {
          "name": "updated!",
          "ordinal": 2,
          "type_info": "Timestamp"
        },
        {
          "name": "tx_lt!",
          "ordinal": 3,
          "type_info": "Int8"
        },
        {
          "name": "nft!",
          "ordinal": 4,
          "type_info": "Varchar"
        },
        {
          "name": "collection?",
          "ordinal": 5,
          "type_info": "Varchar"
        },
        {
          "name": "buyer?",
          "ordinal": 6,
          "type_info": "Varchar"
        },
        {
          "name": "price_token!",
          "ordinal": 7,
          "type_info": "Varchar"
        },
        {
          "name": "price!",
          "ordinal": 8,
          "type_info": "Numeric"
        },
        {
          "name": "usd_price?",
          "ordinal": 9,
          "type_info": "Numeric"
        },
        {
          "name": "finished_at?",
          "ordinal": 10,
          "type_info": "Timestamp"
        },
        {
          "name": "expired_at?",
          "ordinal": 11,
          "type_info": "Timestamp"
        },
        {
          "name": "state!: _",
          "ordinal": 12,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "create",
                  "await_tokens",
                  "active",
                  "filled",
                  "cancelled",
                  "expired"
                ]
              },
              "name": "direct_buy_state"
            }
          }
        },
        {
          "name": "cnt!",
          "ordinal": 13,
          "type_info": "Int8"
        },
        {
          "name": "fee_numerator",
          "ordinal": 14,
          "type_info": "Int4"
        },
        {
          "name": "fee_denominator",
          "ordinal": 15,
          "type_info": "Int4"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false,
        false,
        true,
        false,
        false,
        false,
        null,
        true,
        false,
        null,
        null,
        null,
        null
      ],
      "parameters": {
        "Left": [
          "TextArray"
        ]
      }
    },
    "query": "\n            select s.address             as \"address!\",\n                   s.created             as \"created!\",\n                   s.updated             as \"updated!\",\n                   s.tx_lt               as \"tx_lt!\",\n                   s.nft                 as \"nft!\",\n                   s.collection          as \"collection?\",\n                   s.buyer               as \"buyer?\",\n                   s.price_token         as \"price_token!\",\n                   s.price               as \"price!\",\n                   s.price * p.usd_price as \"usd_price?\",\n                   s.finished_at         as \"finished_at?\",\n                   s.expired_at          as \"expired_at?\",\n                   case when s.state = 'active'::direct_buy_state and to_timestamp(0::double precision) < s.expired_at and\n                             s.expired_at < now()::timestamp then 'expired'::direct_buy_state\n                        else s.state end as \"state!: _\",\n                   1::bigint             as \"cnt!\",\n                   fee_numerator,\n                   fee_denominator\n            from nft_direct_buy s\n                     join offers_whitelist ow on ow.address = s.address\n                     left join token_usd_prices p on s.price_token = p.token\n                     left join lateral ( select ((ne.args -> 'fee') -> 'numerator')::integer   as fee_numerator,\n                                                ((ne.args -> 'fee') -> 'denominator')::integer as fee_denominator\n                                         from nft_events ne\n                                         where ne.event_type = 'market_fee_changed'::event_type\n                                           and (ne.args ->> 'auction') = s.address) ev on true\n            where s.address = any ($1)\n            "
  },
  "27ca21a115f9e9728b2d3fc03c7d12091e50855351d23d0af55818a01c8da139": {
    "describe": {
      "columns": [
        {
          "name": "address!",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "created!",
          "ordinal": 1,
          "type_info": "Timestamp"
        },
        {
          "name": "updated!",
          "ordinal": 2,
          "type_info": "Timestamp"
        },
        {
          "name": "tx_lt!",
          "ordinal": 3,
          "type_info": "Int8"
        },
        {
          "name": "nft!",
          "ordinal": 4,
          "type_info": "Varchar"
        },
        {
          "name": "collection?",
          "ordinal": 5,
          "type_info": "Varchar"
        },
        {
          "name": "buyer?",
          "ordinal": 6,
          "type_info": "Varchar"
        },
        {
          "name": "price_token!",
          "ordinal": 7,
          "type_info": "Varchar"
        },
        {
          "name": "price!",
          "ordinal": 8,
          "type_info": "Numeric"
        },
        {
          "name": "usd_price?",
          "ordinal": 9,
          "type_info": "Numeric"
        },
        {
          "name": "finished_at?",
          "ordinal": 10,
          "type_info": "Timestamp"
        },
        {
          "name": "expired_at?",
          "ordinal": 11,
          "type_info": "Timestamp"
        },
        {
          "name": "state!: _",
          "ordinal": 12,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "create",
                  "await_tokens",
                  "active",
                  "filled",
                  "cancelled",
                  "expired"
                ]
              },
              "name": "direct_buy_state"
            }
          }
        },
        {
          "name": "cnt!",
          "ordinal": 13,
          "type_info": "Int8"
        },
        {
          "name": "fee_numerator",
          "ordinal": 14,
          "type_info": "Int4"
        },
        {
          "name": "fee_denominator",
          "ordinal": 15,
          "type_info": "Int4"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false,
        false,
        true,
        false,
        false,
        false,
        null,
        true,
        false,
        null,
        null,
        null,
        null
      ],
      "parameters": {
        "Left": [
          "Text",
          "TextArray",
          "VarcharArray",
          "Int8",
          "Int8"
        ]
      }
    },
    "query": "\n            select s.address             as \"address!\",\n                   s.created             as \"created!\",\n                   s.updated             as \"updated!\",\n                   s.tx_lt               as \"tx_lt!\",\n                   s.nft                 as \"nft!\",\n                   s.collection          as \"collection?\",\n                   s.buyer               as \"buyer?\",\n                   s.price_token         as \"price_token!\",\n                   s.price               as \"price!\",\n                   s.price * p.usd_price as \"usd_price?\",\n                   s.finished_at         as \"finished_at?\",\n                   s.expired_at          as \"expired_at?\",\n                   case when s.state = 'active'::direct_buy_state and to_timestamp(0::double precision) < s.expired_at and\n                             s.expired_at < now()::timestamp then 'expired'::direct_buy_state\n                        else s.state end as \"state!: _\",\n                   count(1) over ()      as \"cnt!\",\n                   fee_numerator,\n                   fee_denominator\n            from nft_direct_buy s\n                     join offers_whitelist ow on ow.address = s.address\n                     left join token_usd_prices p on s.price_token = p.token\n                     left join lateral ( select ((ne.args -> 'fee') -> 'numerator')::integer   as fee_numerator,\n                                                ((ne.args -> 'fee') -> 'denominator')::integer as fee_denominator\n                                         from nft_events ne\n                                         where ne.event_type = 'market_fee_changed'::event_type\n                                           and (ne.args ->> 'auction') = s.address) ev on true\n                     join nft n on n.address = s.nft\n            where n.owner = $1\n              and (n.collection = any ($2) or array_length($2::varchar[], 1) is null)\n              and (array_length($3::varchar[], 1) is null or s.state::varchar = any ($3))\n            order by s.updated desc\n            limit $4 offset $5\n            "
  },
  "362c539780e121e2242289e6580840ab47b4e188f587ed6f485bd67906fe98e2": {
    "describe": {
      "columns": [
        {
          "name": "count",
          "ordinal": 0,
          "type_info": "Int8"
        }
      ],
      "nullable": [
        null
      ],
      "parameters": {
        "Left": [
          "Text",
          "Text"
        ]
      }
    },
    "query": "\n            select count(1)\n            from nft_collection c\n            where c.address = $1 and c.owner = $2\n            "
  },
  "39e0ae149c1dc545dd7fe47865fc1ecd6d679b97e51699d15fdd0e2854a10520": {
    "describe": {
      "columns": [
        {
          "name": "address!",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "created!",
          "ordinal": 1,
          "type_info": "Timestamp"
        },
        {
          "name": "updated!",
          "ordinal": 2,
          "type_info": "Timestamp"
        },
        {
          "name": "tx_lt!",
          "ordinal": 3,
          "type_info": "Int8"
        },
        {
          "name": "nft!",
          "ordinal": 4,
          "type_info": "Varchar"
        },
        {
          "name": "collection?",
          "ordinal": 5,
          "type_info": "Varchar"
        },
        {
          "name": "seller?",
          "ordinal": 6,
          "type_info": "Varchar"
        },
        {
          "name": "price_token!",
          "ordinal": 7,
          "type_info": "Varchar"
        },
        {
          "name": "price!",
          "ordinal": 8,
          "type_info": "Numeric"
        },
        {
          "name": "usd_price?",
          "ordinal": 9,
          "type_info": "Numeric"
        },
        {
          "name": "finished_at?",
          "ordinal": 10,
          "type_info": "Timestamp"
        },
        {
          "name": "expired_at?",
          "ordinal": 11,
          "type_info": "Timestamp"
        },
        {
          "name": "state!: _",
          "ordinal": 12,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "create",
                  "await_nft",
                  "active",
                  "filled",
                  "cancelled",
                  "expired"
                ]
              },
              "name": "direct_sell_state"
            }
          }
        },
        {
          "name": "cnt!",
          "ordinal": 13,
          "type_info": "Int8"
        },
        {
          "name": "fee_numerator",
          "ordinal": 14,
          "type_info": "Int4"
        },
        {
          "name": "fee_denominator",
          "ordinal": 15,
          "type_info": "Int4"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false,
        false,
        true,
        false,
        false,
        false,
        null,
        true,
        false,
        null,
        null,
        null,
        null
      ],
      "parameters": {
        "Left": [
          "Text"
        ]
      }
    },
    "query": "\n            select s.address             as \"address!\",\n                   s.created             as \"created!\",\n                   s.updated             as \"updated!\",\n                   s.tx_lt               as \"tx_lt!\",\n                   s.nft                 as \"nft!\",\n                   s.collection          as \"collection?\",\n                   s.seller              as \"seller?\",\n                   s.price_token         as \"price_token!\",\n                   s.price               as \"price!\",\n                   s.price * p.usd_price as \"usd_price?\",\n                   s.finished_at         as \"finished_at?\",\n                   s.expired_at          as \"expired_at?\",\n                   case when s.state = 'active'::direct_sell_state and to_timestamp(0) < s.expired_at and s.expired_at < now()::timestamp\n                            then 'expired'::direct_sell_state\n                        else s.state end as \"state!: _\",\n                   count(1) over ()      as \"cnt!\",\n                   fee_numerator,\n                   fee_denominator\n            from nft_direct_sell s\n                     join offers_whitelist ow on ow.address = s.address\n                     left join token_usd_prices p on s.price_token = p.token\n                     left join lateral ( select (ne.args -> 'fee' -> 'numerator')::int   as fee_numerator,\n                                                (ne.args -> 'fee' -> 'denominator')::int as fee_denominator\n                                         from nft_events ne\n                                         where ne.event_type = 'market_fee_changed'\n                                           and ne.args ->> 'auction' = s.address ) as ev on true\n            where s.nft = $1\n              and s.state in ('active', 'expired')\n            order by s.created desc\n            limit 1\n            "
  },
  "4831425882fbf608a15e7848bdfaa2a71412e72f449706c8f6f644f94361fb86": {
    "describe": {
      "columns": [
        {
          "name": "address",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "logo_nft",
          "ordinal": 1,
          "type_info": "Varchar"
        },
        {
          "name": "username",
          "ordinal": 2,
          "type_info": "Varchar"
        },
        {
          "name": "bio",
          "ordinal": 3,
          "type_info": "Text"
        },
        {
          "name": "twitter",
          "ordinal": 4,
          "type_info": "Varchar"
        },
        {
          "name": "instagram",
          "ordinal": 5,
          "type_info": "Varchar"
        },
        {
          "name": "facebook",
          "ordinal": 6,
          "type_info": "Varchar"
        },
        {
          "name": "link",
          "ordinal": 7,
          "type_info": "Varchar"
        },
        {
          "name": "email",
          "ordinal": 8,
          "type_info": "Varchar"
        },
        {
          "name": "avatar_url",
          "ordinal": 9,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        null
      ],
      "parameters": {
        "Left": [
          "Text"
        ]
      }
    },
    "query": "\n               select u.address,\n               u.logo_nft,\n               u.username,\n               u.bio,\n               u.twitter,\n               u.instagram,\n               u.facebook,\n               u.link,\n               u.email,\n               nm.meta -> 'preview' ->> 'source' as avatar_url\n                from users u\n                         left join nft n on n.address = u.logo_nft and n.owner = u.address\n                         left join nft_metadata nm on n.address = nm.nft\n                where u.address = $1\n            "
  },
  "4deb71b9aaec707d58a879c17f3c8ce43a28cf1dbcaaf4697c97aa588d3ce478": {
    "describe": {
      "columns": [
        {
          "name": "collection!",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "name",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "logo",
          "ordinal": 2,
          "type_info": "Varchar"
        },
        {
          "name": "floor_price",
          "ordinal": 3,
          "type_info": "Numeric"
        },
        {
          "name": "total_volume_usd_now!",
          "ordinal": 4,
          "type_info": "Numeric"
        },
        {
          "name": "total_volume_usd_previous!",
          "ordinal": 5,
          "type_info": "Numeric"
        },
        {
          "name": "owners_count!",
          "ordinal": 6,
          "type_info": "Int4"
        },
        {
          "name": "nfts_count!",
          "ordinal": 7,
          "type_info": "Int4"
        },
        {
          "name": "total_rows_count!",
          "ordinal": 8,
          "type_info": "Int4"
        }
      ],
      "nullable": [
        true,
        true,
        true,
        true,
        null,
        null,
        null,
        null,
        null
      ],
      "parameters": {
        "Left": [
          "Timestamp",
          "Timestamp",
          "Int8",
          "Int8"
        ]
      }
    },
    "query": "with periods as ( select $1::timestamp as date_from, $2::timestamp as date_to, 'current' as period_type\n                  union all\n                  select $1::timestamp - ($2::timestamp - $1::timestamp)::interval as date_from,\n                         $1::timestamp - interval '1 seconds'                      as date_to,\n                         'previous'                                                as period_type )\nselect c.address                                       as \"collection!\",\n       c.name,\n       c.logo,\n       c.floor_price_usd                               as \"floor_price\",\n       coalesce(total_volume.cur, 0)                   as \"total_volume_usd_now!\",\n       coalesce(total_volume.prev, 0)                  as \"total_volume_usd_previous!\",\n       c.owners_count::int                             as \"owners_count!\",\n       c.nft_count::int                                as \"nfts_count!\",\n       (count(1) over ())::int                         as \"total_rows_count!\"\nfrom nft_collection_details c\n         left join lateral ( select sum(case when ag.period_type = 'current' then ag.price_usd else 0 end)  cur,\n                                    sum(case when ag.period_type = 'previous' then ag.price_usd else 0 end) prev\n                             from (select p.period_type,\n                                          case when n.address is not null then tup.usd_price * ndb.price else 0 end as price_usd\n                                   from periods p\n                                            left join nft_direct_buy ndb\n                                                      on ndb.updated between p.date_from and p.date_to and ndb.state = 'filled'\n                                            left join offers_whitelist r on r.address = ndb.address\n                                            left join token_usd_prices tup on tup.token = ndb.price_token\n                                            left join nft n on ndb.nft = n.address and n.collection = c.address and\n                                                               not n.burned and r.address is not null\n                                   union all\n                                   select p.period_type,\n                                          case when n.address is not null then tup.usd_price * nds.price else 0 end as price_usd\n                                   from periods p\n                                            left join nft_direct_sell nds\n                                                      on nds.state = 'filled' and nds.updated between p.date_from and p.date_to\n                                            left join token_usd_prices tup on tup.token = nds.price_token\n                                            left join offers_whitelist r on r.address = nds.address\n                                            left join nft n on nds.nft = n.address and n.collection = c.address and\n                                                               not n.burned and r.address is not null\n                                   union all\n                                   select p.period_type,\n                                          case\n                                              when n.address is not null then tup.usd_price * na.max_bid\n                                              else 0 end as price_usd\n                                   from periods p\n                                            left join public.nft_auction na on na.status = 'completed' and\n                                                                               na.finished_at between p.date_from and p.date_to\n                                            left join offers_whitelist r on r.address = na.address\n                                            left join nft n on na.nft = n.address and not n.burned and\n                                                               r.address is not null and n.collection = c.address\n                                            left join token_usd_prices tup on tup.token = na.price_token) as ag ) as total_volume\n                   on true\nwhere c.verified\norder by coalesce(total_volume.cur, 0) desc\nlimit $3 offset $4"
  },
  "518afe302107576bef695026a36523211a031b3f3633a2033eeda42bcdea5f90": {
    "describe": {
      "columns": [
        {
          "name": "auction!",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "buyer!",
          "ordinal": 1,
          "type_info": "Varchar"
        },
        {
          "name": "price!",
          "ordinal": 2,
          "type_info": "Numeric"
        },
        {
          "name": "price_token?",
          "ordinal": 3,
          "type_info": "Varchar"
        },
        {
          "name": "created_at!",
          "ordinal": 4,
          "type_info": "Timestamp"
        },
        {
          "name": "next_bid_value?",
          "ordinal": 5,
          "type_info": "Numeric"
        },
        {
          "name": "tx_lt?",
          "ordinal": 6,
          "type_info": "Int8"
        },
        {
          "name": "active?",
          "ordinal": 7,
          "type_info": "Bool"
        },
        {
          "name": "usd_price?",
          "ordinal": 8,
          "type_info": "Numeric"
        },
        {
          "name": "next_bid_usd_value?",
          "ordinal": 9,
          "type_info": "Numeric"
        },
        {
          "name": "nft?",
          "ordinal": 10,
          "type_info": "Varchar"
        },
        {
          "name": "collection?",
          "ordinal": 11,
          "type_info": "Varchar"
        },
        {
          "name": "cnt!",
          "ordinal": 12,
          "type_info": "Int8"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        null,
        null,
        null,
        false,
        false,
        null
      ],
      "parameters": {
        "Left": [
          "Text",
          "TextArray",
          "Bool",
          "Int8",
          "Int8"
        ]
      }
    },
    "query": "\n            with bids_detailed as ( select x.auction                               as \"auction!\",\n                                           x.buyer                                 as \"buyer!\",\n                                           x.price                                 as \"price!\",\n                                           x.price_token,\n                                           x.created_at                            as \"created_at!\",\n                                           x.next_bid_value,\n                                           x.tx_lt,\n                                           max(x.created_at) over w = x.created_at as active,\n                                           x.price * tup.usd_price                 as usd_price,\n                                           x.next_bid_value * tup.usd_price        as next_bid_usd_value,\n                                           x.nft,\n                                           x.collection\n                                    from nft_auction_bid x\n                                             join offers_whitelist ow on ow.address = x.auction\n                                             left join token_usd_prices tup on tup.token = x.price_token\n                                    window w as (partition by x.auction) )\n            select \"auction!\",\n                   \"buyer!\",\n                   \"price!\",\n                   price_token        as \"price_token?\",\n                   \"created_at!\",\n                   next_bid_value     as \"next_bid_value?\",\n                   tx_lt              as \"tx_lt?\",\n                   active             as \"active?\",\n                   usd_price          as \"usd_price?\",\n                   next_bid_usd_value as \"next_bid_usd_value?\",\n                   nft                as \"nft?\",\n                   collection         as \"collection?\",\n                   count(1) over ()   as \"cnt!\"\n            from bids_detailed b\n            where b.\"buyer!\" = $1\n              and (b.collection = any ($2) or array_length($2::varchar[], 1) is null)\n              and ($3::bool is null or $3::bool = false or b.active is true)\n            order by b.\"created_at!\" desc\n            limit $4 offset $5\n            "
  },
  "56945be68ad2e61fc6b4a28039638c94d6823613030dbd87d073da033b1c1b1e": {
    "describe": {
      "columns": [
        {
          "name": "address",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "nft",
          "ordinal": 1,
          "type_info": "Varchar"
        },
        {
          "name": "wallet_for_bids",
          "ordinal": 2,
          "type_info": "Varchar"
        },
        {
          "name": "price_token",
          "ordinal": 3,
          "type_info": "Varchar"
        },
        {
          "name": "start_price",
          "ordinal": 4,
          "type_info": "Numeric"
        },
        {
          "name": "max_bid",
          "ordinal": 5,
          "type_info": "Numeric"
        },
        {
          "name": "min_bid",
          "ordinal": 6,
          "type_info": "Numeric"
        },
        {
          "name": "start_usd_price",
          "ordinal": 7,
          "type_info": "Numeric"
        },
        {
          "name": "max_usd_bid",
          "ordinal": 8,
          "type_info": "Numeric"
        },
        {
          "name": "min_usd_bid",
          "ordinal": 9,
          "type_info": "Numeric"
        },
        {
          "name": "status: _",
          "ordinal": 10,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "created",
                  "active",
                  "cancelled",
                  "completed",
                  "expired"
                ]
              },
              "name": "auction_status"
            }
          }
        },
        {
          "name": "created_at",
          "ordinal": 11,
          "type_info": "Timestamp"
        },
        {
          "name": "finished_at",
          "ordinal": 12,
          "type_info": "Timestamp"
        },
        {
          "name": "tx_lt",
          "ordinal": 13,
          "type_info": "Int8"
        },
        {
          "name": "bids_count",
          "ordinal": 14,
          "type_info": "Int8"
        },
        {
          "name": "last_bid_from",
          "ordinal": 15,
          "type_info": "Varchar"
        },
        {
          "name": "last_bid_ts",
          "ordinal": 16,
          "type_info": "Timestamp"
        },
        {
          "name": "last_bid_value",
          "ordinal": 17,
          "type_info": "Numeric"
        },
        {
          "name": "last_bid_usd_value",
          "ordinal": 18,
          "type_info": "Numeric"
        },
        {
          "name": "fee_numerator",
          "ordinal": 19,
          "type_info": "Int4"
        },
        {
          "name": "fee_denominator",
          "ordinal": 20,
          "type_info": "Int4"
        },
        {
          "name": "cnt!",
          "ordinal": 21,
          "type_info": "Int8"
        }
      ],
      "nullable": [
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        null
      ],
      "parameters": {
        "Left": [
          "Text"
        ]
      }
    },
    "query": "\n            select a.address,\n                   a.nft,\n                   a.wallet_for_bids,\n                   a.price_token,\n                   a.start_price,\n                   a.max_bid,\n                   a.min_bid,\n                   a.start_usd_price,\n                   a.max_usd_bid,\n                   a.min_usd_bid,\n                   \"status: _\",\n                   a.created_at,\n                   a.finished_at,\n                   a.tx_lt,\n                   a.bids_count,\n                   a.last_bid_from,\n                   a.last_bid_ts,\n                   a.last_bid_value,\n                   a.last_bid_usd_value,\n                   a.fee_numerator,\n                   a.fee_denominator,\n                   count(1) over () as \"cnt!\"\n            from nft_auction_search a\n            where a.nft = $1\n              and a.\"status: _\" in ('active', 'expired')\n            order by a.created_at desc\n            limit 1\n            "
  },
  "5e36b96a70b59b1ead433b73ea16d933e7c306bf8b248c436ee26f2cbcb267e5": {
    "describe": {
      "columns": [
        {
          "name": "trait_type",
          "ordinal": 0,
          "type_info": "Text"
        },
        {
          "name": "trait_value",
          "ordinal": 1,
          "type_info": "Text"
        },
        {
          "name": "cnt!",
          "ordinal": 2,
          "type_info": "Int8"
        }
      ],
      "nullable": [
        null,
        null,
        null
      ],
      "parameters": {
        "Left": [
          "Text"
        ]
      }
    },
    "query": "\n            with nft_attributes as ( select jsonb_array_elements(nm.meta -> 'attributes') -> 'trait_type' as trait_type,\n                                            jsonb_array_elements(nm.meta -> 'attributes') -> 'value'      as trait_value,\n                                            nm.meta,\n                                            n.collection                                                  as nft_collection,\n                                            nm.nft\n                                     from nft_metadata nm\n                                              join nft n on n.address = nm.nft\n                                     where nm.meta -> 'attributes' is not null\n                                       and nm.nft = $1 ),\n                 nft_attributes_col as ( select jsonb_array_elements(nm.meta -> 'attributes') -> 'trait_type' as trait_type,\n                                                jsonb_array_elements(nm.meta -> 'attributes') -> 'value'      as trait_value,\n                                                nm.nft\n                                         from nft_metadata nm\n                                         where nm.nft in ( select n2.address\n                                                           from nft n2\n                                                                    join nft n3 on n3.address = $1 and n2.collection = n3.collection ) )\n            select (na.trait_type #>> '{}')::text  as trait_type,\n                   (na.trait_value #>> '{}')::text as trait_value,\n                   count(*)                        as \"cnt!\"\n            from nft_attributes na\n                     left join nft_attributes_col na2 on na.trait_type = na2.trait_type and na.trait_value = na2.trait_value\n            group by na.trait_type, na.trait_value\n            "
  },
  "61fdd4406009440146a4e5c62d954e5a56e118741094850186368c25286ca49a": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Text",
          "Timestamp",
          "Text",
          "Text",
          {
            "Custom": {
              "kind": {
                "Domain": "Varchar"
              },
              "name": "t_uri"
            }
          },
          {
            "Custom": {
              "kind": {
                "Domain": "Varchar"
              },
              "name": "t_uri"
            }
          },
          "Jsonb",
          "Text"
        ]
      }
    },
    "query": "\n                insert into nft_collection_custom(address, updated, name, description, wallpaper, logo, social)\n                select address, $2, $3, $4, $5, $6, $7 from nft_collection\n                where address = $1 and owner = $8\n                on conflict (address)\n                do update set updated     = $2,\n                              name        = $3,\n                              description = $4,\n                              wallpaper   = $5,\n                              logo        = $6,\n                              social      = $7\n                where nft_collection_custom.address =\n                (select nc.address from nft_collection nc where nc.address = $1 and nc.owner = $8)\n            "
  },
  "623f516b6b170830e04bb017514b0c646fb7a6f72db91a51d152bc6e993575a0": {
    "describe": {
      "columns": [
        {
          "name": "address",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "nft",
          "ordinal": 1,
          "type_info": "Varchar"
        },
        {
          "name": "wallet_for_bids",
          "ordinal": 2,
          "type_info": "Varchar"
        },
        {
          "name": "price_token",
          "ordinal": 3,
          "type_info": "Varchar"
        },
        {
          "name": "start_price",
          "ordinal": 4,
          "type_info": "Numeric"
        },
        {
          "name": "max_bid",
          "ordinal": 5,
          "type_info": "Numeric"
        },
        {
          "name": "min_bid",
          "ordinal": 6,
          "type_info": "Numeric"
        },
        {
          "name": "start_usd_price",
          "ordinal": 7,
          "type_info": "Numeric"
        },
        {
          "name": "max_usd_bid",
          "ordinal": 8,
          "type_info": "Numeric"
        },
        {
          "name": "min_usd_bid",
          "ordinal": 9,
          "type_info": "Numeric"
        },
        {
          "name": "status: _",
          "ordinal": 10,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "created",
                  "active",
                  "cancelled",
                  "completed",
                  "expired"
                ]
              },
              "name": "auction_status"
            }
          }
        },
        {
          "name": "created_at",
          "ordinal": 11,
          "type_info": "Timestamp"
        },
        {
          "name": "finished_at",
          "ordinal": 12,
          "type_info": "Timestamp"
        },
        {
          "name": "tx_lt",
          "ordinal": 13,
          "type_info": "Int8"
        },
        {
          "name": "bids_count",
          "ordinal": 14,
          "type_info": "Int8"
        },
        {
          "name": "last_bid_from",
          "ordinal": 15,
          "type_info": "Varchar"
        },
        {
          "name": "last_bid_ts",
          "ordinal": 16,
          "type_info": "Timestamp"
        },
        {
          "name": "last_bid_value",
          "ordinal": 17,
          "type_info": "Numeric"
        },
        {
          "name": "last_bid_usd_value",
          "ordinal": 18,
          "type_info": "Numeric"
        },
        {
          "name": "fee_numerator",
          "ordinal": 19,
          "type_info": "Int4"
        },
        {
          "name": "fee_denominator",
          "ordinal": 20,
          "type_info": "Int4"
        },
        {
          "name": "cnt!",
          "ordinal": 21,
          "type_info": "Int8"
        }
      ],
      "nullable": [
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        null
      ],
      "parameters": {
        "Left": [
          "TextArray",
          "TextArray",
          "TextArray",
          "Int8",
          "Int8"
        ]
      }
    },
    "query": "\n                    select a.address,\n                           a.nft,\n                           a.wallet_for_bids,\n                           a.price_token,\n                           a.start_price,\n                           a.max_bid,\n                           a.min_bid,\n                           a.start_usd_price,\n                           a.max_usd_bid,\n                           a.min_usd_bid,\n                           \"status: _\",\n                           a.created_at,\n                           a.finished_at,\n                           a.tx_lt,\n                           a.bids_count,\n                           a.last_bid_from,\n                           a.last_bid_ts,\n                           a.last_bid_value,\n                           a.last_bid_usd_value,\n                           a.fee_numerator,\n                           a.fee_denominator,\n                           count(1) over () as \"cnt!\"\n                    from nft_auction_search a\n                    where (a.nft_owner = any ($1) or array_length($1::varchar[], 1) is null)\n                      and (a.collection = any ($2) or array_length($2::varchar[], 1) is null)\n                      and (a.nft = any ($3) or array_length($3::varchar[], 1) is null)\n                    order by a.created_at desc\n                    limit $4 offset $5\n                    "
  },
  "65a16fff5f43881ad7070b72cf7020914eb614fa196afee2b31688e3a62a1c5d": {
    "describe": {
      "columns": [
        {
          "name": "address",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "nft",
          "ordinal": 1,
          "type_info": "Varchar"
        },
        {
          "name": "wallet_for_bids",
          "ordinal": 2,
          "type_info": "Varchar"
        },
        {
          "name": "price_token",
          "ordinal": 3,
          "type_info": "Varchar"
        },
        {
          "name": "start_price",
          "ordinal": 4,
          "type_info": "Numeric"
        },
        {
          "name": "max_bid",
          "ordinal": 5,
          "type_info": "Numeric"
        },
        {
          "name": "min_bid",
          "ordinal": 6,
          "type_info": "Numeric"
        },
        {
          "name": "start_usd_price",
          "ordinal": 7,
          "type_info": "Numeric"
        },
        {
          "name": "max_usd_bid",
          "ordinal": 8,
          "type_info": "Numeric"
        },
        {
          "name": "min_usd_bid",
          "ordinal": 9,
          "type_info": "Numeric"
        },
        {
          "name": "status: _",
          "ordinal": 10,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "created",
                  "active",
                  "cancelled",
                  "completed",
                  "expired"
                ]
              },
              "name": "auction_status"
            }
          }
        },
        {
          "name": "created_at",
          "ordinal": 11,
          "type_info": "Timestamp"
        },
        {
          "name": "finished_at",
          "ordinal": 12,
          "type_info": "Timestamp"
        },
        {
          "name": "tx_lt",
          "ordinal": 13,
          "type_info": "Int8"
        },
        {
          "name": "bids_count",
          "ordinal": 14,
          "type_info": "Int8"
        },
        {
          "name": "last_bid_from",
          "ordinal": 15,
          "type_info": "Varchar"
        },
        {
          "name": "last_bid_ts",
          "ordinal": 16,
          "type_info": "Timestamp"
        },
        {
          "name": "last_bid_value",
          "ordinal": 17,
          "type_info": "Numeric"
        },
        {
          "name": "last_bid_usd_value",
          "ordinal": 18,
          "type_info": "Numeric"
        },
        {
          "name": "fee_numerator",
          "ordinal": 19,
          "type_info": "Int4"
        },
        {
          "name": "fee_denominator",
          "ordinal": 20,
          "type_info": "Int4"
        },
        {
          "name": "cnt!",
          "ordinal": 21,
          "type_info": "Int8"
        }
      ],
      "nullable": [
        false,
        false,
        true,
        true,
        true,
        true,
        true,
        null,
        null,
        null,
        null,
        true,
        true,
        false,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null
      ],
      "parameters": {
        "Left": [
          "TextArray"
        ]
      }
    },
    "query": "\n                with a as (\n                select distinct on (a.address) a.address,\n                                   a.nft,\n                                   a.collection,\n                                   a.nft_owner,\n                                   a.wallet_for_bids,\n                                   a.price_token,\n                                   a.start_price,\n                                   a.max_bid,\n                                   a.min_bid,\n                                   case\n                                       when a.status = 'active'::auction_status and to_timestamp(0) < a.finished_at and\n                                            a.finished_at < now()::timestamp then 'expired'::auction_status\n                                       else a.status end                          as \"status: _\",\n                                   a.created_at,\n                                   a.finished_at,\n                                   a.tx_lt,\n                                   sum(case when b.auction is null then 0 else 1 end)\n                                   over (partition by a.address)                  as bids_count,\n                                   first_value(b.buyer) over bids_w               as last_bid_from,\n                                   first_value(b.price) over bids_w               as last_bid_value,\n                                   first_value(b.price * p.usd_price) over bids_w as last_bid_usd_value,\n                                   first_value(b.created_at) over bids_w          as last_bid_ts,\n                                   a.start_price * p.usd_price                    as start_usd_price,\n                                   a.max_bid * p.usd_price                        as max_usd_bid,\n                                   a.min_bid * p.usd_price                        as min_usd_bid,\n                                   ev.fee_numerator,\n                                   ev.fee_denominator\n                                from nft_auction a\n                                         join offers_whitelist ow on ow.address = a.address\n                                         left join nft_auction_bid b on b.auction = a.address and b.declined is false\n                                         left join token_usd_prices p on p.token = a.price_token\n                                         left join lateral ( select (ne.args -> 'fee' -> 'numerator')::int   as fee_numerator,\n                                                                    (ne.args -> 'fee' -> 'denominator')::int as fee_denominator\n                                                             from nft_events ne\n                                                             where ne.event_type = 'market_fee_changed'\n                                                               and ne.args ->> 'auction' = a.address ) as ev on true\n                                where a.address = any ($1)\n                                  and (\n                                        b.declined is false\n                                        or b.declined is null\n                                    )\n                                    window bids_w as (partition by b.auction order by b.created_at desc)\n                            )\n                            select a.address,\n                                   a.nft,\n                                   a.wallet_for_bids,\n                                   a.price_token,\n                                   a.start_price,\n                                   a.max_bid,\n                                   a.min_bid,\n                                   a.start_usd_price,\n                                   a.max_usd_bid,\n                                   a.min_usd_bid,\n                                   \"status: _\",\n                                   a.created_at,\n                                   a.finished_at,\n                                   a.tx_lt,\n                                   a.bids_count,\n                                   a.last_bid_from,\n                                   a.last_bid_ts,\n                                   a.last_bid_value,\n                                   a.last_bid_usd_value,\n                                   a.fee_numerator,\n                                   a.fee_denominator,\n                                   count(1) over () as \"cnt!\"\n                            from a\n\n            "
  },
  "687213ecf50c45bd37f7cca849d53caee73468ef1382800129ba050245d7d38b": {
    "describe": {
      "columns": [
        {
          "name": "nft",
          "ordinal": 0,
          "type_info": "Varchar"
        }
      ],
      "nullable": [
        false
      ],
      "parameters": {
        "Left": [
          "Text",
          "Text",
          "JsonbArray"
        ]
      }
    },
    "query": "\n            select distinct a.nft\n            from nft_attributes a\n            where a.collection = $1\n              and a.trait_type = $2\n              and a.value = any ($3::jsonb[])\n            order by 1 asc\n            "
  },
  "6ecd8927f14c506efc39a780c50d7cd584eff6c6aa2f8d660415b60313c61615": {
    "describe": {
      "columns": [
        {
          "name": "address?",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "collection?",
          "ordinal": 1,
          "type_info": "Varchar"
        },
        {
          "name": "owner?",
          "ordinal": 2,
          "type_info": "Varchar"
        },
        {
          "name": "manager?",
          "ordinal": 3,
          "type_info": "Varchar"
        },
        {
          "name": "name?",
          "ordinal": 4,
          "type_info": "Text"
        },
        {
          "name": "description?",
          "ordinal": 5,
          "type_info": "Text"
        },
        {
          "name": "burned?",
          "ordinal": 6,
          "type_info": "Bool"
        },
        {
          "name": "updated?",
          "ordinal": 7,
          "type_info": "Timestamp"
        },
        {
          "name": "tx_lt?",
          "ordinal": 8,
          "type_info": "Int8"
        },
        {
          "name": "meta?",
          "ordinal": 9,
          "type_info": "Jsonb"
        },
        {
          "name": "auction?",
          "ordinal": 10,
          "type_info": "Varchar"
        },
        {
          "name": "auction_status: _",
          "ordinal": 11,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "created",
                  "active",
                  "cancelled",
                  "completed",
                  "expired"
                ]
              },
              "name": "auction_status"
            }
          }
        },
        {
          "name": "forsale?",
          "ordinal": 12,
          "type_info": "Varchar"
        },
        {
          "name": "forsale_status: _",
          "ordinal": 13,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "create",
                  "await_nft",
                  "active",
                  "filled",
                  "cancelled",
                  "expired"
                ]
              },
              "name": "direct_sell_state"
            }
          }
        },
        {
          "name": "best_offer?",
          "ordinal": 14,
          "type_info": "Varchar"
        },
        {
          "name": "floor_price_usd?",
          "ordinal": 15,
          "type_info": "Numeric"
        },
        {
          "name": "deal_price_usd?",
          "ordinal": 16,
          "type_info": "Numeric"
        },
        {
          "name": "floor_price?",
          "ordinal": 17,
          "type_info": "Numeric"
        },
        {
          "name": "floor_price_token?",
          "ordinal": 18,
          "type_info": "Varchar"
        },
        {
          "name": "nft_id?",
          "ordinal": 19,
          "type_info": "Text"
        },
        {
          "name": "total_count!",
          "ordinal": 20,
          "type_info": "Int8"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false,
        null,
        true,
        false,
        false,
        false,
        false,
        false,
        null,
        false,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null
      ],
      "parameters": {
        "Left": [
          "Text"
        ]
      }
    },
    "query": "\n            with details as ( select n.address,\n                                     n.collection,\n                                     n.owner,\n                                     n.manager,\n                                     n.name::text                          as name,\n                                     n.description,\n                                     n.burned,\n                                     n.updated,\n                                     n.owner_update_lt                     as tx_lt,\n                                     m.meta,\n                                     auc.auction,\n                                     auc.\"auction_status: _\",\n                                     sale.forsale,\n                                     sale.\"forsale_status: _\",\n                                     ( select distinct on (s.address) first_value(s.address) over w\n                                       from nft_direct_buy s\n                                                left join token_usd_prices tup on tup.token = s.price_token\n                                       where state = 'active'\n                                         and nft = n.address\n                                       window w as (partition by nft order by s.price * tup.usd_price desc)\n                                       limit 1 )                           as best_offer,\n                                     least(auc.price_usd, sale.price_usd)  as floor_price_usd,\n                                     last_deal.last_price                  as deal_price_usd,\n                                     case when least(auc.price_usd, sale.price_usd) = auc.price_usd then auc.min_bid\n                                          when least(auc.price_usd, sale.price_usd) = sale.price_usd then sale.price\n                                          else null::numeric end           as floor_price,\n                                     case when least(auc.price_usd, sale.price_usd) = auc.price_usd\n                                              then auc.token::character varying\n                                          when least(auc.price_usd, sale.price_usd) = sale.price_usd\n                                              then sale.token::character varying\n                                          else null::character varying end as floor_price_token,\n                                     n.id::text                            as nft_id\n                              from nft n\n                                       left join lateral ( select nph.price * tup.usd_price as last_price\n                                                           from nft_price_history nph\n                                                                    join offers_whitelist ow on ow.address = nph.source\n                                                                    left join token_usd_prices tup on tup.token = nph.price_token\n                                                           where nph.nft = n.address\n                                                           order by nph.ts desc\n                                                           limit 1 ) last_deal on true\n                                       left join lateral ( select a.address                 as auction,\n                                                                  case when a.status = 'active' and\n                                                                            to_timestamp(0) < a.finished_at and\n                                                                            a.finished_at < now() then 'expired'\n                                                                       else a.status end    as \"auction_status: _\",\n                                                                  a.min_bid * tup.usd_price as price_usd,\n                                                                  tup.token,\n                                                                  a.min_bid\n                                                           from nft_auction a\n                                                                    join offers_whitelist ow on ow.address = a.address\n                                                                    left join token_usd_prices tup on tup.token = a.price_token\n                                                           where a.nft = n.address\n                                                             and a.status in ('active', 'expired')\n                                                           limit 1 ) auc on true\n                                       left join nft_metadata m on m.nft = n.address\n                                       left join lateral ( select s.address                                as forsale,\n                                                                  case when s.state = 'active' and\n                                                                            to_timestamp(0) < s.expired_at and s.expired_at < now()\n                                                                           then 'expired' else s.state end as \"forsale_status: _\",\n                                                                  s.price * tup.usd_price                  as price_usd,\n                                                                  s.price,\n                                                                  tup.token\n                                                           from nft_direct_sell s\n                                                                    join offers_whitelist ow on ow.address = s.address\n                                                                    left join token_usd_prices tup on tup.token = s.price_token\n                                                           where s.nft = n.address\n                                                             and s.state in ('active', 'expired')\n                                                           limit 1 ) sale on true\n                              where not n.burned\n                                and n.address = $1 )\n            select n.address           as \"address?\",\n                   n.collection        as \"collection?\",\n                   n.owner             as \"owner?\",\n                   n.manager           as \"manager?\",\n                   n.name              as \"name?\",\n                   n.description       as \"description?\",\n                   n.burned            as \"burned?\",\n                   n.updated           as \"updated?\",\n                   n.tx_lt             as \"tx_lt?\",\n                   n.meta              as \"meta?\",\n                   n.auction           as \"auction?\",\n                   n.\"auction_status: _\",\n                   n.forsale           as \"forsale?\",\n                   n.\"forsale_status: _\",\n                   n.best_offer        as \"best_offer?\",\n                   n.floor_price_usd   as \"floor_price_usd?\",\n                   n.deal_price_usd    as \"deal_price_usd?\",\n                   n.floor_price       as \"floor_price?\",\n                   n.floor_price_token as \"floor_price_token?\",\n                   n.nft_id            as \"nft_id?\",\n                   1::bigint           as \"total_count!\"\n            from details n;\n            "
  },
  "71e135350d02fae5ba0b0fbd4c8b0638587ad204948dc9b524e2ed98e8d8d2d7": {
    "describe": {
      "columns": [
        {
          "name": "auction!",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "buyer!",
          "ordinal": 1,
          "type_info": "Varchar"
        },
        {
          "name": "price!",
          "ordinal": 2,
          "type_info": "Numeric"
        },
        {
          "name": "price_token?",
          "ordinal": 3,
          "type_info": "Varchar"
        },
        {
          "name": "created_at!",
          "ordinal": 4,
          "type_info": "Timestamp"
        },
        {
          "name": "next_bid_value?",
          "ordinal": 5,
          "type_info": "Numeric"
        },
        {
          "name": "tx_lt?",
          "ordinal": 6,
          "type_info": "Int8"
        },
        {
          "name": "active?",
          "ordinal": 7,
          "type_info": "Bool"
        },
        {
          "name": "usd_price?",
          "ordinal": 8,
          "type_info": "Numeric"
        },
        {
          "name": "next_bid_usd_value?",
          "ordinal": 9,
          "type_info": "Numeric"
        },
        {
          "name": "nft?",
          "ordinal": 10,
          "type_info": "Varchar"
        },
        {
          "name": "collection?",
          "ordinal": 11,
          "type_info": "Varchar"
        },
        {
          "name": "cnt!",
          "ordinal": 12,
          "type_info": "Int8"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false,
        false,
        false,
        false,
        null,
        null,
        null,
        false,
        false,
        null
      ],
      "parameters": {
        "Left": [
          "Text",
          "TextArray",
          "Bool",
          "Int8",
          "Int8"
        ]
      }
    },
    "query": "\n            with bids_detailed as ( select x.auction                               as \"auction!\",\n                                           x.buyer                                 as \"buyer!\",\n                                           x.price                                 as \"price!\",\n                                           x.price_token,\n                                           x.created_at                            as \"created_at!\",\n                                           x.next_bid_value,\n                                           x.tx_lt,\n                                           x.nft_owner                             as owner,\n                                           max(x.created_at) over w = x.created_at as active,\n                                           x.price * tup.usd_price                 as usd_price,\n                                           x.next_bid_value * tup.usd_price        as next_bid_usd_value,\n                                           x.nft,\n                                           x.collection\n                                    from nft_auction_bid x\n                                             left join token_usd_prices tup on tup.token = x.price_token\n                                    window w as (partition by x.auction) )\n            select \"auction!\",\n                   \"buyer!\",\n                   \"price!\",\n                   price_token        as \"price_token?\",\n                   \"created_at!\",\n                   next_bid_value     as \"next_bid_value?\",\n                   tx_lt              as \"tx_lt?\",\n                   active             as \"active?\",\n                   usd_price          as \"usd_price?\",\n                   next_bid_usd_value as \"next_bid_usd_value?\",\n                   nft                as \"nft?\",\n                   collection         as \"collection?\",\n                   count(1) over ()   as \"cnt!\"\n            from bids_detailed x\n            where x.owner = $1\n              and (x.collection = any ($2) or array_length($2::varchar[], 1) is null)\n              and (x.active = true or ($3::bool is null or $3::bool = false))\n            order by x.\"created_at!\" desc\n            limit $4 offset $5\n            "
  },
  "74c447ec10afdda17c4795674cb197e8e2cc1856808e81e078323c005c87a952": {
    "describe": {
      "columns": [
        {
          "name": "address!",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "nft_name",
          "ordinal": 1,
          "type_info": "Varchar"
        },
        {
          "name": "collection_name",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "object_type!",
          "ordinal": 3,
          "type_info": "Text"
        },
        {
          "name": "image",
          "ordinal": 4,
          "type_info": "Text"
        }
      ],
      "nullable": [
        null,
        null,
        null,
        null,
        null
      ],
      "parameters": {
        "Left": [
          "Text"
        ]
      }
    },
    "query": "\n                        with nft_top as (\n                select n.address,\n                       n.name                                                                           nft_name,\n                       nc.name                                                                          collection_name,\n                       'nft'                                                                         as object_type,\n                       case when m.meta is not null then m.meta::jsonb -> 'preview' ->> 'source' end as \"image\",\n                       case\n                           when lower(n.address) = lower($1) then 10\n                           when lower(n.name) = lower($1) then 9\n                           when n.name like '' || $1 || ' %' then 7.9\n                           when n.name like '% ' || $1 || '' then 7.86\n                           when n.name like '%' || $1 || '' then 7.855\n                           when n.name like '' || $1 || '%' then 7.85\n                           when n.name like '% ' || $1 || ' %' then 7.7\n                           when n.name like '%' || $1 || '%' then 7\n                           when n.address ilike '%' || $1 || '%' then 5\n                           else 1 end                                                                   priority\n                from nft_verified_mv n\n                         left join nft_metadata m on n.address = m.nft\n                         join nft_collection nc on n.collection = nc.address\n                where (n.name ilike '%' || $1 || '%' or n.description ilike '%' || $1 || '%' or n.address ilike '%' || $1 || '%')\n                  and not n.burned\n                order by priority desc\n                limit 20\n            )\n\n            select ag.address as \"address!\", nft_name, collection_name, object_type as \"object_type!\", image\n            from (\n                     select *\n                     from nft_top\n                     union all\n\n                     select c.address,\n                            null            nft_name,\n                            c.name          collection_name,\n                            'collection' as object_type,\n                            c.logo          \"image\",\n                            case\n                                when lower(c.address) = lower($1) then 20\n                                when lower(c.name) = lower($1) then 19\n                                when c.name like '' || $1 || ' %' then 8.9\n                                when c.name like '% ' || $1 || '' then 8.86\n                                when c.name like '%' || $1 || '' then 8.855\n                                when c.name like '' || $1 || '%' then 8.85\n\n                                when c.name like '% ' || $1 || ' %' then 8.7\n                                when c.address ilike '%' || $1 || '%' then 6\n                                else 2 end  priority\n                     from nft_collection c\n                     where (c.name ilike '%' || $1 || '%' or c.description ilike '%' || $1 || '%' or\n                            c.address ilike '%' || $1 || '%')\n                       and c.verified) ag\n            order by ag.priority desc\n            limit 20\n            "
  },
  "7dad6b8f31b1681b476f0a56709d390a73c5096d1d062ab065881a3353d26802": {
    "describe": {
      "columns": [
        {
          "name": "address",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "nft",
          "ordinal": 1,
          "type_info": "Varchar"
        },
        {
          "name": "wallet_for_bids",
          "ordinal": 2,
          "type_info": "Varchar"
        },
        {
          "name": "price_token",
          "ordinal": 3,
          "type_info": "Varchar"
        },
        {
          "name": "start_price",
          "ordinal": 4,
          "type_info": "Numeric"
        },
        {
          "name": "max_bid",
          "ordinal": 5,
          "type_info": "Numeric"
        },
        {
          "name": "min_bid",
          "ordinal": 6,
          "type_info": "Numeric"
        },
        {
          "name": "start_usd_price",
          "ordinal": 7,
          "type_info": "Numeric"
        },
        {
          "name": "max_usd_bid",
          "ordinal": 8,
          "type_info": "Numeric"
        },
        {
          "name": "min_usd_bid",
          "ordinal": 9,
          "type_info": "Numeric"
        },
        {
          "name": "status: _",
          "ordinal": 10,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "created",
                  "active",
                  "cancelled",
                  "completed",
                  "expired"
                ]
              },
              "name": "auction_status"
            }
          }
        },
        {
          "name": "created_at",
          "ordinal": 11,
          "type_info": "Timestamp"
        },
        {
          "name": "finished_at",
          "ordinal": 12,
          "type_info": "Timestamp"
        },
        {
          "name": "tx_lt",
          "ordinal": 13,
          "type_info": "Int8"
        },
        {
          "name": "bids_count",
          "ordinal": 14,
          "type_info": "Int8"
        },
        {
          "name": "last_bid_from",
          "ordinal": 15,
          "type_info": "Varchar"
        },
        {
          "name": "last_bid_ts",
          "ordinal": 16,
          "type_info": "Timestamp"
        },
        {
          "name": "last_bid_value",
          "ordinal": 17,
          "type_info": "Numeric"
        },
        {
          "name": "last_bid_usd_value",
          "ordinal": 18,
          "type_info": "Numeric"
        },
        {
          "name": "fee_numerator",
          "ordinal": 19,
          "type_info": "Int4"
        },
        {
          "name": "fee_denominator",
          "ordinal": 20,
          "type_info": "Int4"
        },
        {
          "name": "cnt!",
          "ordinal": 21,
          "type_info": "Int8"
        }
      ],
      "nullable": [
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        null
      ],
      "parameters": {
        "Left": [
          "TextArray",
          "TextArray",
          "TextArray",
          "Int8",
          "Int8"
        ]
      }
    },
    "query": "\n                    select a.address,\n                           a.nft,\n                           a.wallet_for_bids,\n                           a.price_token,\n                           a.start_price,\n                           a.max_bid,\n                           a.min_bid,\n                           a.start_usd_price,\n                           a.max_usd_bid,\n                           a.min_usd_bid,\n                           \"status: _\",\n                           a.created_at,\n                           a.finished_at,\n                           a.tx_lt,\n                           a.bids_count,\n                           a.last_bid_from,\n                           a.last_bid_ts,\n                           a.last_bid_value,\n                           a.last_bid_usd_value,\n                           a.fee_numerator,\n                           a.fee_denominator,\n                           count(1) over () as \"cnt!\"\n                    from nft_auction_search a\n                    where (a.nft_owner = any ($1) or array_length($1::varchar[], 1) is null)\n                      and (a.collection = any ($2) or array_length($2::varchar[], 1) is null)\n                      and (a.nft = any ($3) or array_length($3::varchar[], 1) is null)\n                    order by a.bids_count\n                    limit $4 offset $5\n                    "
  },
  "92624b001d1d088d1874f37cd5a48fae5826871da9783f4ce6a96ff3650c6f85": {
    "describe": {
      "columns": [
        {
          "name": "address!",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "owner!",
          "ordinal": 1,
          "type_info": "Varchar"
        },
        {
          "name": "name",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "description",
          "ordinal": 3,
          "type_info": "Text"
        },
        {
          "name": "updated!",
          "ordinal": 4,
          "type_info": "Timestamp"
        },
        {
          "name": "wallpaper",
          "ordinal": 5,
          "type_info": "Varchar"
        },
        {
          "name": "logo",
          "ordinal": 6,
          "type_info": "Varchar"
        },
        {
          "name": "total_price",
          "ordinal": 7,
          "type_info": "Numeric"
        },
        {
          "name": "max_price",
          "ordinal": 8,
          "type_info": "Numeric"
        },
        {
          "name": "owners_count",
          "ordinal": 9,
          "type_info": "Int4"
        },
        {
          "name": "verified!",
          "ordinal": 10,
          "type_info": "Bool"
        },
        {
          "name": "created!",
          "ordinal": 11,
          "type_info": "Timestamp"
        },
        {
          "name": "first_mint!",
          "ordinal": 12,
          "type_info": "Timestamp"
        },
        {
          "name": "nft_count!",
          "ordinal": 13,
          "type_info": "Int8"
        },
        {
          "name": "cnt!",
          "ordinal": 14,
          "type_info": "Int8"
        },
        {
          "name": "social",
          "ordinal": 15,
          "type_info": "Jsonb"
        }
      ],
      "nullable": [
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        null,
        null,
        null,
        true,
        true,
        true,
        true,
        true,
        true
      ],
      "parameters": {
        "Left": [
          "Text",
          "Int8",
          "Int8"
        ]
      }
    },
    "query": "\n            select c.address     as \"address!\",\n                   c.owner       as \"owner!\",\n                   c.name,\n                   c.description,\n                   c.updated     as \"updated!\",\n                   c.wallpaper,\n                   c.logo,\n                   null::numeric as total_price,\n                   null::numeric as max_price,\n                   c.owners_count::int,\n                   c.verified    as \"verified!\",\n                   c.created     as \"created!\",\n                   c.first_mint  as \"first_mint!\",\n                   c.nft_count   as \"nft_count!\",\n                   c.total_count as \"cnt!\",\n                   c.social      as \"social\"\n            from nft_collection_details c\n            where c.owner = $1\n            limit $2 offset $3\n            "
  },
  "96ef895ee248facc9b0a5f6532d2979714f35d48de1edae9a477a61dda8afc8d": {
    "describe": {
      "columns": [
        {
          "name": "collection",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "trait_type",
          "ordinal": 1,
          "type_info": "Varchar"
        },
        {
          "name": "values",
          "ordinal": 2,
          "type_info": "Jsonb"
        }
      ],
      "nullable": [
        false,
        false,
        null
      ],
      "parameters": {
        "Left": []
      }
    },
    "query": "\n            select a.collection, a.trait_type, jsonb_agg(a.value) as values\n            from ( select distinct a.collection, a.trait_type, a.value\n                   from nft_attributes a\n                   order by a.collection, a.trait_type, a.value ) as a\n            group by a.collection, a.trait_type\n            "
  },
  "987565e6f4f34477164ce2e99c9dde490e1a221fb38113dbe9af1f9d3d70132f": {
    "describe": {
      "columns": [
        {
          "name": "address!",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "created!",
          "ordinal": 1,
          "type_info": "Timestamp"
        },
        {
          "name": "updated!",
          "ordinal": 2,
          "type_info": "Timestamp"
        },
        {
          "name": "tx_lt!",
          "ordinal": 3,
          "type_info": "Int8"
        },
        {
          "name": "nft!",
          "ordinal": 4,
          "type_info": "Varchar"
        },
        {
          "name": "collection?",
          "ordinal": 5,
          "type_info": "Varchar"
        },
        {
          "name": "seller?",
          "ordinal": 6,
          "type_info": "Varchar"
        },
        {
          "name": "price_token!",
          "ordinal": 7,
          "type_info": "Varchar"
        },
        {
          "name": "price!",
          "ordinal": 8,
          "type_info": "Numeric"
        },
        {
          "name": "usd_price?",
          "ordinal": 9,
          "type_info": "Numeric"
        },
        {
          "name": "finished_at?",
          "ordinal": 10,
          "type_info": "Timestamp"
        },
        {
          "name": "expired_at?",
          "ordinal": 11,
          "type_info": "Timestamp"
        },
        {
          "name": "state!: _",
          "ordinal": 12,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "create",
                  "await_nft",
                  "active",
                  "filled",
                  "cancelled",
                  "expired"
                ]
              },
              "name": "direct_sell_state"
            }
          }
        },
        {
          "name": "cnt!",
          "ordinal": 13,
          "type_info": "Int8"
        },
        {
          "name": "fee_numerator",
          "ordinal": 14,
          "type_info": "Int4"
        },
        {
          "name": "fee_denominator",
          "ordinal": 15,
          "type_info": "Int4"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false,
        false,
        true,
        false,
        false,
        false,
        null,
        true,
        false,
        null,
        null,
        null,
        null
      ],
      "parameters": {
        "Left": [
          "TextArray"
        ]
      }
    },
    "query": "\n            select s.address             as \"address!\",\n                   s.created             as \"created!\",\n                   s.updated             as \"updated!\",\n                   s.tx_lt               as \"tx_lt!\",\n                   s.nft                 as \"nft!\",\n                   s.collection          as \"collection?\",\n                   s.seller              as \"seller?\",\n                   s.price_token         as \"price_token!\",\n                   s.price               as \"price!\",\n                   s.price * p.usd_price as \"usd_price?\",\n                   s.finished_at         as \"finished_at?\",\n                   s.expired_at          as \"expired_at?\",\n                   case when s.state = 'active'::direct_sell_state and to_timestamp(0) < s.expired_at and s.expired_at < now()::timestamp\n                            then 'expired'::direct_sell_state\n                        else s.state end as \"state!: _\",\n                   count(1) over ()      as \"cnt!\",\n                   fee_numerator,\n                   fee_denominator\n            from nft_direct_sell s\n                     join offers_whitelist ow on ow.address = s.address\n                     left join token_usd_prices p on s.price_token = p.token\n                     left join lateral ( select (ne.args -> 'fee' -> 'numerator')::int   as fee_numerator,\n                                                (ne.args -> 'fee' -> 'denominator')::int as fee_denominator\n                                         from nft_events ne\n                                         where ne.event_type = 'market_fee_changed'\n                                           and ne.args ->> 'auction' = s.address ) as ev on true\n            where s.address = any ($1)\n            "
  },
  "98d1d4f85a2899aa04d38f720c0feafe6537f97c298cf5fd99014ac9a15145c3": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          {
            "Custom": {
              "kind": {
                "Domain": "Varchar"
              },
              "name": "t_address"
            }
          },
          {
            "Custom": {
              "kind": {
                "Domain": "Varchar"
              },
              "name": "t_address"
            }
          },
          "Varchar",
          "Text",
          "Varchar",
          "Varchar",
          "Varchar",
          "Varchar",
          {
            "Custom": {
              "kind": {
                "Domain": "Varchar"
              },
              "name": "t_email"
            }
          }
        ]
      }
    },
    "query": "\n                insert into users(address, logo_nft, username, bio, twitter, instagram, facebook, link, email)\n                values ($1, $2, $3, $4, $5, $6, $7, $8, $9)\n                on conflict (address)\n                do update set logo_nft  = $2,\n                              username  = $3,\n                              bio       = $4,\n                              twitter   = $5,\n                              instagram = $6,\n                              facebook  = $7,\n                              link      = $8,\n                              email     = $9\n\n            "
  },
  "999b4f97c635e660acf90af9a113ae329c524a3706bc3c334262071ed7485055": {
    "describe": {
      "columns": [],
      "nullable": [],
      "parameters": {
        "Left": [
          "Varchar",
          "Numeric",
          "Timestamp"
        ]
      }
    },
    "query": "\n                insert into token_usd_prices (token, usd_price, ts)\n                values ($1::varchar, $2, $3)\n                on conflict (token) do update set usd_price = EXCLUDED.usd_price,\n                                                  ts        = EXCLUDED.ts;\n                "
  },
  "a825be428aabdf0c2dcda85690a51fb35ce1f1a642c83c5e72c21daea5097fae": {
    "describe": {
      "columns": [
        {
          "name": "address!",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "created!",
          "ordinal": 1,
          "type_info": "Timestamp"
        },
        {
          "name": "updated!",
          "ordinal": 2,
          "type_info": "Timestamp"
        },
        {
          "name": "tx_lt!",
          "ordinal": 3,
          "type_info": "Int8"
        },
        {
          "name": "nft!",
          "ordinal": 4,
          "type_info": "Varchar"
        },
        {
          "name": "collection?",
          "ordinal": 5,
          "type_info": "Varchar"
        },
        {
          "name": "buyer?",
          "ordinal": 6,
          "type_info": "Varchar"
        },
        {
          "name": "price_token!",
          "ordinal": 7,
          "type_info": "Varchar"
        },
        {
          "name": "price!",
          "ordinal": 8,
          "type_info": "Numeric"
        },
        {
          "name": "usd_price?",
          "ordinal": 9,
          "type_info": "Numeric"
        },
        {
          "name": "finished_at?",
          "ordinal": 10,
          "type_info": "Timestamp"
        },
        {
          "name": "expired_at?",
          "ordinal": 11,
          "type_info": "Timestamp"
        },
        {
          "name": "state!: _",
          "ordinal": 12,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "create",
                  "await_tokens",
                  "active",
                  "filled",
                  "cancelled",
                  "expired"
                ]
              },
              "name": "direct_buy_state"
            }
          }
        },
        {
          "name": "cnt!",
          "ordinal": 13,
          "type_info": "Int8"
        },
        {
          "name": "fee_numerator",
          "ordinal": 14,
          "type_info": "Int4"
        },
        {
          "name": "fee_denominator",
          "ordinal": 15,
          "type_info": "Int4"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false,
        false,
        true,
        false,
        false,
        false,
        null,
        true,
        false,
        null,
        null,
        null,
        null
      ],
      "parameters": {
        "Left": [
          "Text"
        ]
      }
    },
    "query": "\n            select s.address             as \"address!\",\n                   s.created             as \"created!\",\n                   s.updated             as \"updated!\",\n                   s.tx_lt               as \"tx_lt!\",\n                   s.nft                 as \"nft!\",\n                   s.collection          as \"collection?\",\n                   s.buyer               as \"buyer?\",\n                   s.price_token         as \"price_token!\",\n                   s.price               as \"price!\",\n                   s.price * p.usd_price as \"usd_price?\",\n                   s.finished_at         as \"finished_at?\",\n                   s.expired_at          as \"expired_at?\",\n                   case when s.state = 'active'::direct_buy_state and to_timestamp(0::double precision) < s.expired_at and\n                             s.expired_at < now()::timestamp then 'expired'::direct_buy_state\n                        else s.state end as \"state!: _\",\n                   1::bigint             as \"cnt!\",\n                   fee_numerator,\n                   fee_denominator\n            from nft_direct_buy s\n                     join offers_whitelist ow on ow.address = s.address\n                     left join token_usd_prices p on s.price_token = p.token\n                     left join lateral ( select ((ne.args -> 'fee') -> 'numerator')::integer   as fee_numerator,\n                                                ((ne.args -> 'fee') -> 'denominator')::integer as fee_denominator\n                                         from nft_events ne\n                                         where ne.event_type = 'market_fee_changed'::event_type\n                                           and (ne.args ->> 'auction') = s.address) ev on true\n            where s.address = $1\n            "
  },
  "ad74e02ac0b9618166e8cb69658036f128dd319e521bc6c76a58dbc86a9c094e": {
    "describe": {
      "columns": [
        {
          "name": "address?",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "nft?",
          "ordinal": 1,
          "type_info": "Varchar"
        },
        {
          "name": "wallet_for_bids?",
          "ordinal": 2,
          "type_info": "Varchar"
        },
        {
          "name": "price_token?",
          "ordinal": 3,
          "type_info": "Varchar"
        },
        {
          "name": "start_price?",
          "ordinal": 4,
          "type_info": "Numeric"
        },
        {
          "name": "max_bid?",
          "ordinal": 5,
          "type_info": "Numeric"
        },
        {
          "name": "min_bid?",
          "ordinal": 6,
          "type_info": "Numeric"
        },
        {
          "name": "start_usd_price?",
          "ordinal": 7,
          "type_info": "Numeric"
        },
        {
          "name": "max_usd_bid?",
          "ordinal": 8,
          "type_info": "Numeric"
        },
        {
          "name": "min_usd_bid?",
          "ordinal": 9,
          "type_info": "Numeric"
        },
        {
          "name": "status: _",
          "ordinal": 10,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "created",
                  "active",
                  "cancelled",
                  "completed",
                  "expired"
                ]
              },
              "name": "auction_status"
            }
          }
        },
        {
          "name": "created_at?",
          "ordinal": 11,
          "type_info": "Timestamp"
        },
        {
          "name": "finished_at?",
          "ordinal": 12,
          "type_info": "Timestamp"
        },
        {
          "name": "tx_lt?",
          "ordinal": 13,
          "type_info": "Int8"
        },
        {
          "name": "bids_count?",
          "ordinal": 14,
          "type_info": "Int8"
        },
        {
          "name": "last_bid_from?",
          "ordinal": 15,
          "type_info": "Varchar"
        },
        {
          "name": "last_bid_ts?",
          "ordinal": 16,
          "type_info": "Timestamp"
        },
        {
          "name": "last_bid_value?",
          "ordinal": 17,
          "type_info": "Numeric"
        },
        {
          "name": "last_bid_usd_value?",
          "ordinal": 18,
          "type_info": "Numeric"
        },
        {
          "name": "fee_numerator?",
          "ordinal": 19,
          "type_info": "Int4"
        },
        {
          "name": "fee_denominator?",
          "ordinal": 20,
          "type_info": "Int4"
        },
        {
          "name": "cnt!",
          "ordinal": 21,
          "type_info": "Int8"
        }
      ],
      "nullable": [
        false,
        false,
        true,
        true,
        true,
        true,
        true,
        null,
        null,
        null,
        null,
        true,
        true,
        false,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null
      ],
      "parameters": {
        "Left": [
          "Text"
        ]
      }
    },
    "query": "\n            with auction as ( select distinct on (a.address) a.address,\n                                                             a.nft,\n                                                             a.collection,\n                                                             a.nft_owner,\n                                                             a.wallet_for_bids,\n                                                             a.price_token,\n                                                             a.start_price,\n                                                             a.max_bid,\n                                                             a.min_bid,\n                                                             case when a.status = 'active'::auction_status and\n                                                                       to_timestamp(0) < a.finished_at and a.finished_at < now()::timestamp\n                                                                      then 'expired'::auction_status\n                                                                  else a.status end                         as \"status: _\",\n                                                             a.created_at,\n                                                             a.finished_at,\n                                                             a.tx_lt,\n                                                             sum(case when b.auction is null then 0 else 1 end)\n                                                             over (partition by a.address)                  as bids_count,\n                                                             first_value(b.buyer) over bids_w               as last_bid_from,\n                                                             first_value(b.price) over bids_w               as last_bid_value,\n                                                             first_value(b.price * p.usd_price) over bids_w as last_bid_usd_value,\n                                                             first_value(b.created_at) over bids_w          as last_bid_ts,\n                                                             a.start_price * p.usd_price                    as start_usd_price,\n                                                             a.max_bid * p.usd_price                        as max_usd_bid,\n                                                             a.min_bid * p.usd_price                        as min_usd_bid,\n                                                             ev.fee_numerator,\n                                                             ev.fee_denominator\n                              from nft_auction a\n                                       join offers_whitelist ow on ow.address = a.address\n                                       left join nft_auction_bid b on b.auction = a.address and b.declined is false\n                                       left join token_usd_prices p on p.token = a.price_token\n                                       left join lateral ( select (ne.args -> 'fee' -> 'numerator')::int   as fee_numerator,\n                                                                  (ne.args -> 'fee' -> 'denominator')::int as fee_denominator\n                                                           from nft_events ne\n                                                           where ne.event_type = 'market_fee_changed'\n                                                             and ne.args ->> 'auction' = a.address ) as ev on true\n                              where (b.declined is false or b.declined is null)\n                                and a.address = $1\n                              window bids_w as (partition by b.auction order by b.created_at desc) )\n            \n            select a.address            as \"address?\",\n                   a.nft                as \"nft?\",\n                   a.wallet_for_bids    as \"wallet_for_bids?\",\n                   a.price_token        as \"price_token?\",\n                   a.start_price        as \"start_price?\",\n                   a.max_bid            as \"max_bid?\",\n                   a.min_bid            as \"min_bid?\",\n                   a.start_usd_price    as \"start_usd_price?\",\n                   a.max_usd_bid        as \"max_usd_bid?\",\n                   a.min_usd_bid        as \"min_usd_bid?\",\n                   \"status: _\",\n                   a.created_at         as \"created_at?\",\n                   a.finished_at        as \"finished_at?\",\n                   a.tx_lt              as \"tx_lt?\",\n                   a.bids_count         as \"bids_count?\",\n                   a.last_bid_from      as \"last_bid_from?\",\n                   a.last_bid_ts        as \"last_bid_ts?\",\n                   a.last_bid_value     as \"last_bid_value?\",\n                   a.last_bid_usd_value as \"last_bid_usd_value?\",\n                   a.fee_numerator      as \"fee_numerator?\",\n                   a.fee_denominator    as \"fee_denominator?\",\n                   count(1) over ()     as \"cnt!\"\n            from auction a\n            "
  },
  "b956b7fc297a07ea75b388ca8a982ddcc5ee435ec2cb437ec47a83a93a503fd2": {
    "describe": {
      "columns": [
        {
          "name": "auction!",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "buyer!",
          "ordinal": 1,
          "type_info": "Varchar"
        },
        {
          "name": "price!",
          "ordinal": 2,
          "type_info": "Numeric"
        },
        {
          "name": "usd_price",
          "ordinal": 3,
          "type_info": "Numeric"
        },
        {
          "name": "created_at!",
          "ordinal": 4,
          "type_info": "Timestamp"
        },
        {
          "name": "next_bid_value!",
          "ordinal": 5,
          "type_info": "Numeric"
        },
        {
          "name": "next_bid_usd_value",
          "ordinal": 6,
          "type_info": "Numeric"
        },
        {
          "name": "tx_lt!",
          "ordinal": 7,
          "type_info": "Int8"
        },
        {
          "name": "active!",
          "ordinal": 8,
          "type_info": "Bool"
        },
        {
          "name": "cnt!",
          "ordinal": 9,
          "type_info": "Int8"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        null,
        false,
        false,
        null,
        false,
        null,
        null
      ],
      "parameters": {
        "Left": [
          "Text",
          "Int8",
          "Int8"
        ]
      }
    },
    "query": "\n            select b.auction                             as \"auction!\",\n                   b.buyer                               as \"buyer!\",\n                   b.price                               as \"price!\",\n                   b.price * tup.usd_price               as \"usd_price\",\n                   b.created_at                          as \"created_at!\",\n                   b.next_bid_value                      as \"next_bid_value!\",\n                   b.next_bid_value * tup.usd_price      as \"next_bid_usd_value\",\n                   b.tx_lt                               as \"tx_lt!\",\n                   max(created_at) over w = b.created_at as \"active!\",\n                   count(1) over ()                      as \"cnt!\"\n            from nft_auction_bid b\n                     join offers_whitelist ow on ow.address = b.auction\n                     left join token_usd_prices tup on tup.token = b.price_token\n            where auction = $1\n              and declined is false\n            window w as (partition by auction)\n            order by created_at desc\n            limit $2 offset $3\n            "
  },
  "c45e9c75eab06dc40a97435dad115b2194cec184c725047ba601bb2b16c1535a": {
    "describe": {
      "columns": [
        {
          "name": "address!",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "created!",
          "ordinal": 1,
          "type_info": "Timestamp"
        },
        {
          "name": "updated!",
          "ordinal": 2,
          "type_info": "Timestamp"
        },
        {
          "name": "tx_lt!",
          "ordinal": 3,
          "type_info": "Int8"
        },
        {
          "name": "nft!",
          "ordinal": 4,
          "type_info": "Varchar"
        },
        {
          "name": "collection?",
          "ordinal": 5,
          "type_info": "Varchar"
        },
        {
          "name": "buyer?",
          "ordinal": 6,
          "type_info": "Varchar"
        },
        {
          "name": "price_token!",
          "ordinal": 7,
          "type_info": "Varchar"
        },
        {
          "name": "price!",
          "ordinal": 8,
          "type_info": "Numeric"
        },
        {
          "name": "usd_price?",
          "ordinal": 9,
          "type_info": "Numeric"
        },
        {
          "name": "finished_at?",
          "ordinal": 10,
          "type_info": "Timestamp"
        },
        {
          "name": "expired_at?",
          "ordinal": 11,
          "type_info": "Timestamp"
        },
        {
          "name": "state!: _",
          "ordinal": 12,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "create",
                  "await_tokens",
                  "active",
                  "filled",
                  "cancelled",
                  "expired"
                ]
              },
              "name": "direct_buy_state"
            }
          }
        },
        {
          "name": "cnt!",
          "ordinal": 13,
          "type_info": "Int8"
        },
        {
          "name": "fee_numerator",
          "ordinal": 14,
          "type_info": "Int4"
        },
        {
          "name": "fee_denominator",
          "ordinal": 15,
          "type_info": "Int4"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false,
        false,
        true,
        false,
        false,
        false,
        null,
        true,
        false,
        null,
        null,
        null,
        null
      ],
      "parameters": {
        "Left": [
          "Text",
          "VarcharArray",
          "Int8",
          "Int8"
        ]
      }
    },
    "query": "\n            select s.address             as \"address!\",\n                   s.created             as \"created!\",\n                   s.updated             as \"updated!\",\n                   s.tx_lt               as \"tx_lt!\",\n                   s.nft                 as \"nft!\",\n                   s.collection          as \"collection?\",\n                   s.buyer               as \"buyer?\",\n                   s.price_token         as \"price_token!\",\n                   s.price               as \"price!\",\n                   s.price * p.usd_price as \"usd_price?\",\n                   s.finished_at         as \"finished_at?\",\n                   s.expired_at          as \"expired_at?\",\n                   case when s.state = 'active'::direct_buy_state and to_timestamp(0::double precision) < s.expired_at and\n                             s.expired_at < now()::timestamp then 'expired'::direct_buy_state\n                        else s.state end as \"state!: _\",\n                   count(1) over ()      as \"cnt!\",\n                   fee_numerator,\n                   fee_denominator\n            from nft_direct_buy s\n                     join offers_whitelist ow on ow.address = s.address\n                     left join token_usd_prices p on s.price_token = p.token\n                     left join lateral ( select ((ne.args -> 'fee') -> 'numerator')::integer   as fee_numerator,\n                                                ((ne.args -> 'fee') -> 'denominator')::integer as fee_denominator\n                                         from nft_events ne\n                                         where ne.event_type = 'market_fee_changed'::event_type\n                                           and (ne.args ->> 'auction') = s.address) ev on true\n            where s.nft = $1\n              and s.state = 'active'::direct_buy_state\n              and (to_timestamp(0::double precision) = s.expired_at or s.expired_at > now()::timestamp)\n              and (array_length($2::varchar[], 1) is null or s.state::varchar = any ($2))\n            order by s.updated desc\n            limit $3 offset $4\n            "
  },
  "c5ca7a30d9ee5ad8c606875f5994b903130f1b3669f91196f4f1d5f6250d0dfe": {
    "describe": {
      "columns": [
        {
          "name": "is_enabled",
          "ordinal": 0,
          "type_info": "Bool"
        }
      ],
      "nullable": [
        null
      ],
      "parameters": {
        "Left": [
          "TextArray",
          "TextArray",
          "Bool"
        ]
      }
    },
    "query": "select case\n                               when not $3::bool then false\n                               when $1::text[] = '{}'::text[] and $2::text[] = '{}'::text[] then true\n                               when coalesce(array_length($2::text[], 1), 0) > 0 and\n                                    coalesce(array_length($1::text[], 1), 0) > 0 and (\n                                                                                          select count(1)\n                                                                                          from nft n\n                                                                                          where n.owner = any ($1::text[])\n                                                                                            and n.collection = any ($2::text[])\n                                                                                      ) > 1000 then true\n\n                               when coalesce(array_length($2::text[], 1), 0) > 0 and $1::text[] = '{}'::text[] and (select sum(nft_count)\n                                                                                                      from nft_collection_details ncd\n                                                                                                      where ncd.address = any ($2::text[])\n                                                                                                     ) > 1000 then true\n\n\n                               when $2::text[] = '{}'::text[] and coalesce(array_length($1::text[], 1), 0) > 0 and (\n                                                                                                         select count(1)\n                                                                                                         from nft_verified_mv n\n                                                                                                         where n.owner = any ($1::text[])\n                                                                                                     ) > 1000 then true\n                               else false\n                               end is_enabled"
  },
  "ceb4e8c41753cf04b752ed3a46ddc5953a07466459d48cd54182dcccd3aefdc7": {
    "describe": {
      "columns": [
        {
          "name": "address",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "owner",
          "ordinal": 1,
          "type_info": "Varchar"
        },
        {
          "name": "name",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "description",
          "ordinal": 3,
          "type_info": "Text"
        },
        {
          "name": "created",
          "ordinal": 4,
          "type_info": "Timestamp"
        },
        {
          "name": "updated",
          "ordinal": 5,
          "type_info": "Timestamp"
        },
        {
          "name": "verified",
          "ordinal": 6,
          "type_info": "Bool"
        },
        {
          "name": "wallpaper",
          "ordinal": 7,
          "type_info": "Varchar"
        },
        {
          "name": "logo",
          "ordinal": 8,
          "type_info": "Varchar"
        },
        {
          "name": "owners_count",
          "ordinal": 9,
          "type_info": "Int8"
        },
        {
          "name": "nft_count",
          "ordinal": 10,
          "type_info": "Int8"
        },
        {
          "name": "floor_price_usd",
          "ordinal": 11,
          "type_info": "Numeric"
        },
        {
          "name": "total_volume_usd",
          "ordinal": 12,
          "type_info": "Numeric"
        },
        {
          "name": "attributes",
          "ordinal": 13,
          "type_info": "Json"
        },
        {
          "name": "first_mint",
          "ordinal": 14,
          "type_info": "Timestamp"
        },
        {
          "name": "social",
          "ordinal": 15,
          "type_info": "Jsonb"
        },
        {
          "name": "max_price",
          "ordinal": 16,
          "type_info": "Numeric"
        },
        {
          "name": "total_price",
          "ordinal": 17,
          "type_info": "Numeric"
        },
        {
          "name": "cnt!",
          "ordinal": 18,
          "type_info": "Int8"
        },
        {
          "name": "previews!",
          "ordinal": 19,
          "type_info": "Json"
        }
      ],
      "nullable": [
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        null,
        null,
        null,
        null
      ],
      "parameters": {
        "Left": [
          "Text"
        ]
      }
    },
    "query": "\n            select c.address,\n                   c.owner,\n                   c.name,\n                   c.description,\n                   c.created,\n                   c.updated,\n                   c.verified,\n                   c.wallpaper,\n                   c.logo,\n                   c.owners_count,\n                   c.nft_count,\n                   c.floor_price_usd,\n                   c.total_volume_usd,\n                   c.attributes,\n                   c.first_mint,\n                   c.social,\n                   null::numeric as max_price,\n                   null::numeric as total_price,\n                   1::bigint     as \"cnt!\",\n                   '[]'::json    as \"previews!\"\n            from nft_collection_details c\n            where c.address = $1\n            "
  },
  "cfaf80b5e72b7300cb39336c3a7f676b1ef23266be36bae1ffe88cd9a90f1d49": {
    "describe": {
      "columns": [
        {
          "name": "address!",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "created!",
          "ordinal": 1,
          "type_info": "Timestamp"
        },
        {
          "name": "updated!",
          "ordinal": 2,
          "type_info": "Timestamp"
        },
        {
          "name": "tx_lt!",
          "ordinal": 3,
          "type_info": "Int8"
        },
        {
          "name": "nft!",
          "ordinal": 4,
          "type_info": "Varchar"
        },
        {
          "name": "collection?",
          "ordinal": 5,
          "type_info": "Varchar"
        },
        {
          "name": "buyer?",
          "ordinal": 6,
          "type_info": "Varchar"
        },
        {
          "name": "price_token!",
          "ordinal": 7,
          "type_info": "Varchar"
        },
        {
          "name": "price!",
          "ordinal": 8,
          "type_info": "Numeric"
        },
        {
          "name": "usd_price?",
          "ordinal": 9,
          "type_info": "Numeric"
        },
        {
          "name": "finished_at?",
          "ordinal": 10,
          "type_info": "Timestamp"
        },
        {
          "name": "expired_at?",
          "ordinal": 11,
          "type_info": "Timestamp"
        },
        {
          "name": "state!: _",
          "ordinal": 12,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "create",
                  "await_tokens",
                  "active",
                  "filled",
                  "cancelled",
                  "expired"
                ]
              },
              "name": "direct_buy_state"
            }
          }
        },
        {
          "name": "cnt!",
          "ordinal": 13,
          "type_info": "Int8"
        },
        {
          "name": "fee_numerator",
          "ordinal": 14,
          "type_info": "Int4"
        },
        {
          "name": "fee_denominator",
          "ordinal": 15,
          "type_info": "Int4"
        }
      ],
      "nullable": [
        false,
        false,
        false,
        false,
        false,
        true,
        false,
        false,
        false,
        null,
        true,
        false,
        null,
        null,
        null,
        null
      ],
      "parameters": {
        "Left": [
          "Text",
          "TextArray",
          "VarcharArray",
          "Int8",
          "Int8"
        ]
      }
    },
    "query": "\n            select s.address             as \"address!\",\n                   s.created             as \"created!\",\n                   s.updated             as \"updated!\",\n                   s.tx_lt               as \"tx_lt!\",\n                   s.nft                 as \"nft!\",\n                   s.collection          as \"collection?\",\n                   s.buyer               as \"buyer?\",\n                   s.price_token         as \"price_token!\",\n                   s.price               as \"price!\",\n                   s.price * p.usd_price as \"usd_price?\",\n                   s.finished_at         as \"finished_at?\",\n                   s.expired_at          as \"expired_at?\",\n                   case when s.state = 'active'::direct_buy_state and to_timestamp(0::double precision) < s.expired_at and\n                             s.expired_at < now()::timestamp then 'expired'::direct_buy_state\n                        else s.state end as \"state!: _\",\n                   count(1) over ()      as \"cnt!\",\n                   fee_numerator,\n                   fee_denominator\n            from nft_direct_buy s\n                     join offers_whitelist ow on ow.address = s.address\n                     left join token_usd_prices p on s.price_token = p.token\n                     left join lateral ( select ((ne.args -> 'fee') -> 'numerator')::integer   as fee_numerator,\n                                                ((ne.args -> 'fee') -> 'denominator')::integer as fee_denominator\n                                         from nft_events ne\n                                         where ne.event_type = 'market_fee_changed'::event_type\n                                           and (ne.args ->> 'auction') = s.address) ev on true\n            where s.buyer = $1\n              and (s.collection = any ($2) or array_length($2::varchar[], 1) is null)\n              and (array_length($3::varchar[], 1) is null or s.state::varchar = any ($3))\n            order by s.updated desc\n            limit $4 offset $5\n            "
  },
  "d00b14e00e00daba2385b0e16755cf8f602ce7a035c35cd0a67b1d6370f9d280": {
    "describe": {
      "columns": [
        {
          "name": "mimetype!",
          "ordinal": 0,
          "type_info": "Text"
        }
      ],
      "nullable": [
        true
      ],
      "parameters": {
        "Left": []
      }
    },
    "query": "\n            select distinct mimetype as \"mimetype!\" from nft_type_mv group by mimetype\n            "
  },
  "d29f3f3f4f87188fb10f915ea29759bd9bcd04db28d2707fad283affecd632c5": {
    "describe": {
      "columns": [
        {
          "name": "address!",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "code!",
          "ordinal": 1,
          "type_info": "Text"
        }
      ],
      "nullable": [
        false,
        null
      ],
      "parameters": {
        "Left": []
      }
    },
    "query": "\n            select r.address as \"address!\", r.code::text as \"code!\"\n            from roots r\n            where expiry_date is null\n               or now()::timestamp < expiry_date;\n            "
  },
  "e10ecf13473c9bab7601edf33cb9854728f51742f65a36e227657bcb668819f9": {
    "describe": {
      "columns": [
        {
          "name": "fee_numerator!",
          "ordinal": 0,
          "type_info": "Int4"
        },
        {
          "name": "fee_denominator!",
          "ordinal": 1,
          "type_info": "Int4"
        },
        {
          "name": "collection",
          "ordinal": 2,
          "type_info": "Text"
        },
        {
          "name": "nft",
          "ordinal": 3,
          "type_info": "Text"
        }
      ],
      "nullable": [
        null,
        null,
        null,
        null
      ],
      "parameters": {
        "Left": [
          "Text",
          {
            "Custom": {
              "kind": {
                "Enum": [
                  "auction",
                  "sell",
                  "buy"
                ]
              },
              "name": "t_root_types"
            }
          }
        ]
      }
    },
    "query": "\n            select case when fee.fee_numerator is not null and fee.fee_denominator is not null then fee.fee_numerator\n                        else (ne.args -> 'fee' -> 'numerator')::int end   \"fee_numerator!\",\n                   case when fee.fee_numerator is not null and fee.fee_denominator is not null then fee.fee_denominator\n                        else (ne.args -> 'fee' -> 'denominator')::int end \"fee_denominator!\",\n                   fee.collection,\n                   fee.nft\n            from nft_events ne\n                     join roots r on ne.address = r.address and r.code = $2::t_root_types\n                     left join lateral ( select nc.fee_numerator,\n                                                nc.fee_denominator,\n                                                max(n.collection) collection,\n                                                max(n.id)::text   nft\n                                         from nft n\n                                                  join nft_collection nc\n                                                       on n.collection = nc.address and nc.fee_numerator is not null and\n                                                          nc.fee_denominator is not null\n                                         where n.owner = $1\n                                         group by nc.fee_numerator, nc.fee_denominator\n                                         order by min(nc.fee_numerator / nc.fee_denominator)\n                                         limit 1 ) as fee on true\n            where ne.event_type = 'market_fee_default_changed'\n            order by created_at desc, created_lt desc, id desc\n            limit 1\n            "
  },
  "e84788ccf8061a9452dfacb46ae563d00fa53837a58f87dab63acb4154728afd": {
    "describe": {
      "columns": [
        {
          "name": "auction!",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "buyer!",
          "ordinal": 1,
          "type_info": "Varchar"
        },
        {
          "name": "price!",
          "ordinal": 2,
          "type_info": "Numeric"
        },
        {
          "name": "usd_price",
          "ordinal": 3,
          "type_info": "Numeric"
        },
        {
          "name": "created_at!",
          "ordinal": 4,
          "type_info": "Timestamp"
        },
        {
          "name": "next_bid_value!",
          "ordinal": 5,
          "type_info": "Numeric"
        },
        {
          "name": "next_bid_usd_value",
          "ordinal": 6,
          "type_info": "Numeric"
        },
        {
          "name": "tx_lt!",
          "ordinal": 7,
          "type_info": "Int8"
        },
        {
          "name": "active!",
          "ordinal": 8,
          "type_info": "Bool"
        },
        {
          "name": "cnt!",
          "ordinal": 9,
          "type_info": "Int8"
        }
      ],
      "nullable": [
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null
      ],
      "parameters": {
        "Left": [
          "Text"
        ]
      }
    },
    "query": "\n            select first_value(b.auction) over w                        as \"auction!\",\n                   first_value(b.buyer) over w                          as \"buyer!\",\n                   first_value(b.price) over w                          as \"price!\",\n                   first_value(b.price * tup.usd_price) over w          as \"usd_price\",\n                   first_value(b.created_at) over w                     as \"created_at!\",\n                   first_value(b.next_bid_value) over w                 as \"next_bid_value!\",\n                   first_value(b.next_bid_value * tup.usd_price) over w as \"next_bid_usd_value\",\n                   first_value(b.tx_lt) over w                          as \"tx_lt!\",\n                   true                                                 as \"active!\",\n                   count(1) over ()                                     as \"cnt!\"\n            from nft_auction_bid b\n                     join offers_whitelist ow on ow.address = b.auction\n                     left join token_usd_prices tup on tup.token = b.price_token\n            where auction = $1\n              and declined is false\n            window w as (partition by auction order by created_at desc)\n            limit 1\n            "
  },
  "ebd264003cdbac7a611dc7c75bcb585eccd732466be13ccd2e3238cf0f1351fc": {
    "describe": {
      "columns": [
        {
          "name": "ts",
          "ordinal": 0,
          "type_info": "Timestamp"
        },
        {
          "name": "usd_price!",
          "ordinal": 1,
          "type_info": "Numeric"
        }
      ],
      "nullable": [
        false,
        true
      ],
      "parameters": {
        "Left": [
          "Text",
          "Timestamp",
          "Timestamp"
        ]
      }
    },
    "query": "\n            select ts, usd_price as \"usd_price!\"\n            from nft_price_history nph\n                     inner join offers_whitelist ow on ow.address = nph.source\n            where nft = $1\n              and ts between $2 and $3\n              and usd_price is not null\n            order by ts\n            "
  },
  "f0337d4f749117e7cb72f3601c9047e3a92037a6b756c0704b9a19a22ab2f264": {
    "describe": {
      "columns": [
        {
          "name": "address",
          "ordinal": 0,
          "type_info": "Varchar"
        },
        {
          "name": "collection",
          "ordinal": 1,
          "type_info": "Varchar"
        },
        {
          "name": "owner",
          "ordinal": 2,
          "type_info": "Varchar"
        },
        {
          "name": "manager",
          "ordinal": 3,
          "type_info": "Varchar"
        },
        {
          "name": "name",
          "ordinal": 4,
          "type_info": "Text"
        },
        {
          "name": "description",
          "ordinal": 5,
          "type_info": "Text"
        },
        {
          "name": "burned",
          "ordinal": 6,
          "type_info": "Bool"
        },
        {
          "name": "updated",
          "ordinal": 7,
          "type_info": "Timestamp"
        },
        {
          "name": "tx_lt",
          "ordinal": 8,
          "type_info": "Int8"
        },
        {
          "name": "meta",
          "ordinal": 9,
          "type_info": "Jsonb"
        },
        {
          "name": "auction",
          "ordinal": 10,
          "type_info": "Varchar"
        },
        {
          "name": "auction_status: _",
          "ordinal": 11,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "created",
                  "active",
                  "cancelled",
                  "completed",
                  "expired"
                ]
              },
              "name": "auction_status"
            }
          }
        },
        {
          "name": "forsale",
          "ordinal": 12,
          "type_info": "Varchar"
        },
        {
          "name": "forsale_status: _",
          "ordinal": 13,
          "type_info": {
            "Custom": {
              "kind": {
                "Enum": [
                  "create",
                  "await_nft",
                  "active",
                  "filled",
                  "cancelled",
                  "expired"
                ]
              },
              "name": "direct_sell_state"
            }
          }
        },
        {
          "name": "best_offer",
          "ordinal": 14,
          "type_info": "Varchar"
        },
        {
          "name": "floor_price_usd",
          "ordinal": 15,
          "type_info": "Numeric"
        },
        {
          "name": "deal_price_usd",
          "ordinal": 16,
          "type_info": "Numeric"
        },
        {
          "name": "floor_price",
          "ordinal": 17,
          "type_info": "Numeric"
        },
        {
          "name": "floor_price_token",
          "ordinal": 18,
          "type_info": "Varchar"
        },
        {
          "name": "nft_id",
          "ordinal": 19,
          "type_info": "Text"
        },
        {
          "name": "total_count!",
          "ordinal": 20,
          "type_info": "Int8"
        }
      ],
      "nullable": [
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        null
      ],
      "parameters": {
        "Left": [
          "TextArray"
        ]
      }
    },
    "query": "\n            select n.*, 1::bigint as \"total_count!\"\n            from nft_details n\n            where n.address = any ($1)\n            "
  }
}